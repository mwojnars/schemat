- __id:
    - 0
    - 0
  entries:
    - key: name
      value: Category
    - key: info
      value: Category of items that represent categories
    - key: class_path
      value: /system/local/item.js:Category
    - key: cache_ttl
      value: 60
    - key: fields
      value:
        entries:
          - key: class_path
            value:
              info: SUN path to a Javascript file that contains a (base) class for this
                category. May contain an optional class name appended after
                colon ':'. If the class name is missing (no colon), default
                import from the file is used.
              "@": schemat.type.STRING
          - key: class_name
            value:
              info: Custom internal name for the Class of this category, for debugging. Also
                used as an alias when exporting the Class from the category's
                module.
              "@": schemat.type.STRING
          - key: class_init
            value:
              info: Module-level initialization for this category's Javascript class.
                Typically contains import statements and global variables.
                Preceeds the Class definition (`class_body`, `views`) in the
                category's module code.
              "@": schemat.type.CODE
          - key: class_body
            value:
              info: Source code of the class (a body without heading) that will be created for
                this category. The class inherits from the `class_path` class,
                or the class of the first base category, or the top-level Item.
              "@": schemat.type.CODE
          - key: views
            value:
              info: "Source code of React functional components to be added dynamically to the
                category's Class (`class_body` property) as VIEW_*(props)
                methods for rendering item views. View methods are called bound:
                this=item to be rendered."
              values:
                "@": schemat.type.CODE
              "@": schemat.type.CATALOG
          - key: cache_ttl
            value:
              info: Time To Live (TTL). Determines for how long (in seconds) an item of this
                category is kept in a server-side cache after being loaded from
                DB, for reuse by subsequent requests. A real number. If zero,
                the items are evicted immediately after each request.
              default: 5
              "@": schemat.type.NUMBER
          - key: cached_methods
            value:
              info: Space- and/or comma-separated list of method names of this category's
                Class whose calls are to be cached via Item.setCaching(). Only
                used when a custom subclass is created through the `class_body`
                or `views` properties.
              "@": schemat.type.STRING
          - key: fields
            value:
              info: Fields must have unique names.
              default:
                entries:
                  - key: name
                    value:
                      info: Display name of the item. May contain spaces, punctuation, non-latin
                        characters.
                      "@": schemat.type.STRING
                  - key: path
                    value:
                      info: "Canonical path of this item within the SUN, for: display, resolving
                        relative code imports, resolving relative item
                        references (REF type), etc. If `path` is configured,
                        callers can only import this item's code through the
                        `path`, so that the code is always interpreted the same
                        and can be cached after parsing."
                      unique: true
                      "@": schemat.type.PATH
                  - key: info
                    value:
                      info: Description of the item.
                      "@": schemat.type.TEXT
                  - key: prototype
                    value:
                      info: An item of the same category that serves as a prototype for this one, that
                        is, provides default values for missing properties of
                        this item. Multiple prototypes are allowed, the first
                        one has priority over subsequent ones. Prototypes can be
                        defined for regular items, as well as for categories -
                        the latter case represents category inheritance.
                        Items/categories may inherit individual entries from
                        catalog-valued fields, see Item.getInherited(). In this
                        way, subcategories inherit individual field schemas as
                        defined in base categories.
                      "@": schemat.type.ITEM
                "@": schemat.data.Catalog
              values:
                "@": schemat.type.SCHEMA
              "@": schemat.type.CATALOG
        "@": schemat.data.Catalog
  "@": schemat.data.Data
- __id:
    - 0
    - 1
  name: Site
  info: Top-level URL routing + global configuration of applications, servers,
    startup.
  class_path: /system/local/site.js:Site
  fields:
    URL:
      info: "Base URL at which the website is served: protocol + domain + root path
        (if any); no trailing '/'."
      "@": schemat.type.STRING
    path_internal:
      info: URL route of an internal application for default/admin web access to
        items. The application should handle all items.
      "@": schemat.type.PATH
    routes:
      info: URL prefixes (as keys) mapped to items that shall perform routing of
        requests whose URLs start with a given prefix. NO leading/trailing
        slashes.
      values:
        "@": schemat.type.ITEM
      "@": schemat.type.CATALOG
- __id:
    - 0
    - 2
  name: Router
  info: A set of sub-applications or sub-folders, each bound to a different URL
    prefix.
  fields:
    routes:
      values:
        "@": schemat.type.ITEM
      "@": schemat.type.CATALOG
  class_path: /system/local/site.js:Router
- __id:
    - 0
    - 3
  name: File
  info: File with a text content.
  class_path: /system/local/site.js:File
  cached_methods: read
  fields:
    content:
      "@": schemat.type.CODE
    mimetype:
      info: MIME type string (must include '/') to be set as Content-Type when serving
        file download; or an extension ('js', 'jpg', ...) to be converted to an
        appropriate type. If missing, response mimetype is inferred from the URL
        path extension, if present.
      "@": schemat.type.STRING
    format:
      "@": schemat.type.STRING
    _is_file:
      default: true
      "@": schemat.type.BOOLEAN
- __id:
    - 0
    - 4
  name: FileLocal
  info: File located on a local disk, identified by its local file path.
  prototype:
    - 0
    - 3
  class_path: /system/local/site.js:FileLocal
  fields:
    path:
      "@": schemat.type.STRING
- __id:
    - 0
    - 5
  name: Folder
  info: A directory of files, each file has a unique name (path). May contain
    nested directories.
  class_path: /system/local/site.js:Folder
  fields:
    files:
      values:
        "@": schemat.type.ITEM
      "@": schemat.type.CATALOG
    _is_folder:
      default: true
      "@": schemat.type.BOOLEAN
- __id:
    - 0
    - 6
  name: FolderLocal
  info: |-
    File folder located on a local disk, identified by its local file path.
    Gives access to all files and folders beneath the path.
  prototype:
    - 0
    - 5
  class_path: /system/local/site.js:FolderLocal
  fields:
    path:
      "@": schemat.type.STRING
- __id:
    - 0
    - 7
  name: Application
  info: Category of application records. An application groups all spaces &
    categories available in the system and provides system-level configuration.
  class_path: /system/local/site.js:Application
- __id:
    - 0
    - 8
  name: AppBasic
  info: Application that serves items on simple URLs of the form /CID:IID. Mainly
    used for system & admin purposes, or as a last-resort default for URL
    generation.
  class_path: /system/local/site.js:AppBasic
  fields:
    category:
      info: Optional category(ies) of items handled by this application.
      category:
        =:
          - 0
          - 0
        "@": (item)
      "@": schemat.type.ITEM
    drop_cid:
      info: If true, CID is excluded from URL paths. Requires that a single `category`
        is declared for the application; and implies that only the exact
        instances (no inheritance) of this category are handled (otherwise,
        instances of subclasses are handled, too).
      "@": schemat.type.BOOLEAN
- __id:
    - 0
    - 9
  name: AppSpaces
  info: "Application for accessing public data through verbose paths of the form:
    .../SPACE:IID, where SPACE is a text identifier assigned to a category in
    `spaces` property."
  class_path: /system/local/site.js:AppSpaces
  fields:
    spaces:
      values:
        category:
          =:
            - 0
            - 0
          "@": (item)
        "@": schemat.type.ITEM
      "@": schemat.type.CATALOG
- __id:
    - 0
    - 10
  name: Schema
  info: Category of items that represent schema types. Some of the items are
    wrappers around system types (STRING, INTEGER etc.), while some others
    implement new schema types by themselves using dynamic code.
  class_path: /system/local/type.js:SchemaPrototype
  fields:
    class_path:
      "@": schemat.type.STRING
    encode:
      info: Body of a function with the signature `encode(obj,props={})`. Should
        return a state that encodes the input object/value, `obj`.
      "@": schemat.type.CODE
    decode:
      "@": schemat.type.CODE
    initial:
      "@": schemat.type.GENERIC
    properties:
      values:
        "@": schemat.type.SCHEMA
      "@": schemat.type.CATALOG
- __id:
    - 0
    - 11
  name: Database
  info: Base category for items that represent an abstract database layer.
- __id:
    - 6
    - 1
  name: /local
  path: .
- __id:
    - 5
    - 1
  name: /system
  files:
    local:
      - 6
      - 1
    Application:
      - 0
      - 7
    File:
      - 0
      - 3
    Folder:
      - 0
      - 5
    Site:
      - 0
      - 1
