- __id:
    - 0
    - 0
  entries:
    - key: name
      value: Category
    - key: info
      value: Category of items that represent categories
    - key: _boot_class
      value: schemat.item.Category
    - key: cache_ttl
      value: 60
    - key: fields
      value:
        entries:
          - key: code
            value:
              cache:
                "@": schemat.data.Map
              info: Source code of a Javascript module to be created for this category. May
                contain imports. Should export a Class that defines the class to
                be used by items of this category. Alternatively, the Class can
                be defined through a `class` and/or `views` properties.
              "@": schemat.type.CODE
          - key: class
            value:
              cache:
                "@": schemat.data.Map
              info: Source code of the class (a body without heading) that will be created for
                this category. The class inherits from the `_boot_class`, or the
                class of the first base category, or the top-level Item.
              "@": schemat.type.CODE
          - key: views
            value:
              cache:
                "@": schemat.data.Map
              info: "Source code of React functional components to be added dynamically to the
                category's Class (`class` property) as VIEW_*(props) methods for
                rendering item views. View methods are called bound: this=item
                to be rendered."
              values:
                cache:
                  "@": schemat.data.Map
                "@": schemat.type.CODE
              "@": schemat.type.CATALOG
          - key: cache_ttl
            value:
              cache:
                "@": schemat.data.Map
              info: Time To Live (TTL). Determines for how long (in seconds) an item of this
                category is kept in a server-side cache after being loaded from
                DB, for reuse by subsequent requests. A real number. If zero,
                the items are evicted immediately after each request.
              default: 5
              "@": schemat.type.NUMBER
          - key: cached_methods
            value:
              cache:
                "@": schemat.data.Map
              info: Space- and/or comma-separated list of method names of this category's
                class whose calls are to be cached via Item.setCaching().
              "@": schemat.type.STRING
          - key: fields
            value:
              cache:
                "@": schemat.data.Map
              info: Fields must have unique names.
              default:
                entries:
                  - key: name
                    value:
                      cache:
                        "@": schemat.data.Map
                      info: Display name of the item. May contain spaces, punctuation, non-latin
                        characters.
                      "@": schemat.type.STRING
                  - key: path
                    value:
                      cache:
                        "@": schemat.data.Map
                      info: "Canonical path of this item within the SUN, for: display, resolving
                        relative code imports, resolving relative item
                        references (REF type), etc. If `path` is configured,
                        callers can only import this item's code through the
                        `path`, so that the code is always interpreted the same
                        and can be cached after parsing."
                      "@": schemat.type.PATH
                  - key: info
                    value:
                      cache:
                        "@": schemat.data.Map
                      info: Description of the item.
                      "@": schemat.type.TEXT
                  - key: prototype
                    value:
                      cache:
                        "@": schemat.data.Map
                      info: An item of the same category that serves as a prototype for this one, that
                        is, provides default values for missing properties of
                        this item. Multiple prototypes are allowed, the first
                        one has priority over subsequent ones. Prototypes can be
                        defined for regular items, as well as for categories -
                        the latter case represents category inheritance.
                        Items/categories may inherit individual entries from
                        catalog-valued fields, see Item.getInherited(). In this
                        way, subcategories inherit individual field schemas as
                        defined in base categories.
                      "@": schemat.type.ITEM
                "@": schemat.data.Catalog
              values:
                cache:
                  "@": schemat.data.Map
                "@": schemat.type.SCHEMA
              "@": schemat.type.CATALOG
          - key: _boot_class
            value:
              cache:
                "@": schemat.data.Map
              info: Name of a core Javascript class, subclass of Item, to be used for items of
                this category. If `code` or `code_*` is configured, the class is
                subclassed dynamically to insert the desired code. Should only
                be used for core Schemat categories.
              "@": schemat.type.STRING
        "@": schemat.data.Catalog
  "@": schemat.data.Data
- __id:
    - 0
    - 1
  name: Site
  info: Top-level URL routing + global configuration of applications, servers,
    startup.
  _boot_class: schemat.item.Site
  fields:
    URL:
      cache:
        "@": schemat.data.Map
      info: "Base URL at which the website is served: protocol + domain + root path
        (if any); no trailing '/'."
      "@": schemat.type.STRING
    path_internal:
      cache:
        "@": schemat.data.Map
      info: URL route of an internal application for default/admin web access to
        items. The application should handle all items.
      "@": schemat.type.PATH
    path_local:
      cache:
        "@": schemat.data.Map
      info: URL route of a FolderLocal that maps to the root folder of the Schemat's
        local installation.
      "@": schemat.type.PATH
    routes:
      cache:
        "@": schemat.data.Map
      info: URL prefixes (as keys) mapped to items that shall perform routing of
        requests whose URLs start with a given prefix. NO leading/trailing
        slashes.
      values:
        cache:
          "@": schemat.data.Map
        "@": schemat.type.ITEM
      "@": schemat.type.CATALOG
- __id:
    - 0
    - 2
  name: Router
  info: A set of sub-applications or sub-folders, each bound to a different URL
    prefix.
  fields:
    routes:
      cache:
        "@": schemat.data.Map
      values:
        cache:
          "@": schemat.data.Map
        "@": schemat.type.ITEM
      "@": schemat.type.CATALOG
  _boot_class: schemat.item.Router
- __id:
    - 0
    - 3
  name: File
  info: File with a text content.
  _boot_class: schemat.item.File
  cached_methods: read
  fields:
    content:
      cache:
        "@": schemat.data.Map
      "@": schemat.type.CODE
    mimetype:
      cache:
        "@": schemat.data.Map
      info: MIME type string (must include '/') to be set as Content-Type when serving
        file download; or an extension ('js', 'jpg', ...) to be converted to an
        appropriate type. If missing, response mimetype is inferred from the URL
        path extension, if present.
      "@": schemat.type.STRING
    format:
      cache:
        "@": schemat.data.Map
      "@": schemat.type.STRING
    _is_file:
      cache:
        "@": schemat.data.Map
      default: true
      "@": schemat.type.BOOLEAN
- __id:
    - 0
    - 4
  name: FileLocal
  info: File located on a local disk, identified by its local file path.
  prototype:
    - 0
    - 3
  _boot_class: schemat.item.FileLocal
  fields:
    path:
      cache:
        "@": schemat.data.Map
      "@": schemat.type.STRING
- __id:
    - 0
    - 5
  name: Folder
  info: A directory of files, each file has a unique name (path). May contain
    nested directories.
  _boot_class: schemat.item.Folder
  fields:
    files:
      cache:
        "@": schemat.data.Map
      values:
        cache:
          "@": schemat.data.Map
        "@": schemat.type.ITEM
      "@": schemat.type.CATALOG
    _is_folder:
      cache:
        "@": schemat.data.Map
      default: true
      "@": schemat.type.BOOLEAN
- __id:
    - 0
    - 6
  name: FolderLocal
  info: |-
    File folder located on a local disk, identified by its local file path.
    Gives access to all files and folders beneath the path.
  prototype:
    - 0
    - 5
  _boot_class: schemat.item.FolderLocal
  fields:
    path:
      cache:
        "@": schemat.data.Map
      "@": schemat.type.STRING
- __id:
    - 0
    - 7
  name: Application
  info: Category of application records. An application groups all spaces &
    categories available in the system and provides system-level configuration.
  _boot_class: schemat.item.Application
  fields:
    findRoute:
      cache:
        "@": schemat.data.Map
      "@": schemat.type.CODE
    urlPath:
      cache:
        "@": schemat.data.Map
      "@": schemat.type.CODE
    _boot_class:
      cache:
        "@": schemat.data.Map
      "@": schemat.type.STRING
- __id:
    - 0
    - 8
  name: AppBasic
  info: Application that serves items on simple URLs of the form /CID:IID. Mainly
    used for system & admin purposes, or as a last-resort default for URL
    generation.
  _boot_class: schemat.item.AppBasic
  fields:
    category:
      cache:
        "@": schemat.data.Map
      info: Optional category(ies) of items handled by this application.
      category_base:
        =:
          - 0
          - 0
        "@": (item)
      "@": schemat.type.ITEM
    drop_cid:
      cache:
        "@": schemat.data.Map
      info: If true, CID is excluded from URL paths. Requires that a single `category`
        is declared for the application; and implies that only the exact
        instances (no inheritance) of this category are handled (otherwise,
        instances of subclasses are handled, too).
      "@": schemat.type.BOOLEAN
- __id:
    - 0
    - 9
  name: AppSpaces
  info: "Application for accessing public data through verbose paths of the form:
    .../SPACE:IID, where SPACE is a text identifier assigned to a category in
    `spaces` property."
  _boot_class: schemat.item.AppSpaces
  fields:
    spaces:
      cache:
        "@": schemat.data.Map
      values:
        cache:
          "@": schemat.data.Map
        category_base:
          =:
            - 0
            - 0
          "@": (item)
        "@": schemat.type.ITEM
      "@": schemat.type.CATALOG
- __id:
    - 0
    - 10
  name: Schema
  info: Category of items that represent schema types. Some of the items are
    wrappers around system types (STRING, INTEGER etc.), while some others
    implement new schema types from scratch.
- __id:
    - 0
    - 11
  name: Database
  info: Base category for items that represent an abstract database layer.
- __id:
    - 5
    - 1
  name: /system
  files:
    Application:
      - 0
      - 7
    File:
      - 0
      - 3
    Folder:
      - 0
      - 5
    Site:
      - 0
      - 1
