- id: 1001
  name: main-app
  info: Entry point to the web application. Contains top-level configuration of
    the website, URL routes, app-level database etc.
  root:
    "@": 1007
  global:
    "@": schemat:Catalog
  default_path: /$/id
  logger:
    "@": 1037
  eval_allowed: true
  __category:
    "@": 2
- id: 1005
  name: app_source
  info: Path to the local directory containing source code of the application.
    Typically, this directory does NOT include Schemat source code, and is
    mainly used for serving static files, like .css files, robots.txt etc.
  local_path: ./app
  __container:
    "@": 1007
  __category:
    "@": 6
- id: 1006
  name: app_objects
  entries:
    "@": schemat:Catalog
  __container:
    "@": 1007
  __category:
    "@": 5
- id: 1007
  name: <root>
  info: Root of the container hierarchy exposed at URL path = /
  entries:
    "":
      "@": 1008
    $:
      "@": 1019
    "*app_source":
      "@": 1005
    "*app_objects":
      "@": 1006
    "@": schemat:Catalog
  __path: /
  __category:
    "@": 5
- id: 1008
  name: home
  __container:
    "@": 1007
  __category:
    "@": 25
- id: 1009
  name: /$/sys
  info: Core system objects and categories, for dynamic imports by path instead of
    ID.
  __container:
    "@": 1019
  __category:
    "@": 5
- id: 1019
  name: system
  info: >-
    The root system directory (/$). It provides access to:

    1) every web object by its ID through the "default URL path" (.../id/<ID>), which is used when the object does not belong to any other URL container;

    2) Schemat's source code that is read from a local disk folder.
  entries:
    id:
      "@": 1021
    local:
      "@": 1020
    sys:
      "@": 1009
    "@": schemat:Catalog
  __container:
    "@": 1007
  __category:
    "@": 5
- id: 1020
  name: /$/local
  local_path: .
  paths_allowed: schemat/ app/ demo/ node_modules/
  __container:
    "@": 1019
  __category:
    "@": 6
- id: 1021
  name: default-namespace
  info: All objects accessible by their IDs.
  __container:
    "@": 1019
  __category:
    "@": 8
- id: 2001
  name: Varia
  info: Category of items that do not belong to any specific category.
  class_body: >-
    static check() { import('/$/local/schemat/common/utils.js').then(mod =>
    console.log("Varia.code: imported ", mod)) }

    static error() { throw new Error('Varia/code/error()') }
  schema:
    title:
      repeated: true
      "@": schemat/types/type.js:STRING
    "@": schemat:Catalog
  __category:
    "@": 1
- id: 2002
  title: Ala ma kota Sierściucha i psa Kłapoucha.
  title/2: drugi tytuł...
  __category:
    "@": 2001
- id: 2003
  title: ąłęÓŁŻŹŚ
- id: 2004
  name: Post A
  text: Ala ma kota
  __category:
    "@": 2006
- id: 2005
  name: MysqlDB
  schema:
    host:
      "@": schemat/types/type.js:STRING
    port:
      "@": schemat/types/type.js:STRING
    user:
      "@": schemat/types/type.js:STRING
    database:
      "@": schemat/types/type.js:STRING
    password:
      "@": schemat/types/type.js:STRING
    connection:
      info: Javascript object containing connection parameters.
      "@": schemat/types/type.js:GENERIC
    tables:
      info: Mapping of categories (their paths) to names of sql tables.
      value_type:
        "@": schemat/types/type.js:STRING
      "@": schemat/types/catalog_type.js:CATALOG
    offset:
      "@": schemat/types/type.js:INTEGER
    readonly:
      "@": schemat/types/type.js:BOOLEAN
    "@": schemat:Catalog
  class: schemat/db/mysql.js:MySQL
  __category:
    "@": 1
- id: 2006
  name: TwitterPost
  schema:
    text:
      "@": schemat/types/type.js:STRING
    "@": schemat:Catalog
  class_init: |
    // DRAFT...
    // import {print} from '/app/utils.js'
    // console.log('print:', print)
    // console.log('TwitterPost/code executed')

    // import {check} from '/app/widgets.js'
    // import {WebObject} from '/$/local/schemat/core/object.js'
    // import vm from 'vm'
    // check()
    // console.log('schemat:', schemat)
    // console.log('WebObject:', WebObject)
    // console.log('vm:', vm)
  views:
    view: |
      let text = this.text
      return P('Post:', BR(), text)
    "@": schemat:Catalog
  class_body: |-
    // FOR RECORD ONLY...
    // this method works OK (no await import)
    init_OK() {
        console.log('this.utils #1: started...')
        return import('/app/utils.js').then(utils => {
            this.utils = utils
            console.log('this.utils #1:', this.utils)
        })
    }
    // this method works WRONG: the web request is being completed while 
    // the method waits on await import below (!?)
    async init_ERR() {
        console.log('this.utils #1: started...')
        let utils = await import('/app/utils.js')
        this.utils = utils
        console.log('this.utils #1:', this.utils)
    }
  __category:
    "@": 1
- id: 2007
  name: /apps
  entries:
    demo:
      "@": 2011
    "@": schemat:Catalog
  __category:
    "@": 5
- id: 2008
  name: /app
  entries:
    utils.js:
      "@": 2009
    widgets.js:
      "@": 2010
    "@": schemat:Catalog
  __category:
    "@": 5
- id: 2009
  content: export let print = console.log
  __category:
    "@": 4
  __container:
    "@": 2008
- id: 2010
  content: |-
    import {print} from '../app/utils.js'
    export function check() { print('called widgets.js:check()') } 
    //let fs = await import('fs')
    //print('fs:',fs)
  __category:
    "@": 4
  __container:
    "@": 2008
- id: 2011
  name: /demo
  __category:
    "@": 5
  __container:
    "@": 2007
- id: 2012
  name: main-space
  spaces:
    sys.category:
      "@": 1
    "@": schemat:Catalog
  __category:
    "@": 9
- id: 2013
  name: varia_01
  info: xxxxxxxxxxxxxxxxxx
  __category:
    "@": 2001
