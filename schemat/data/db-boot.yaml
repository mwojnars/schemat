- __id: 0
  name: Category
  info: Category of items that represent categories
  cache_ttl: 60
  fields:
    defaults:
      values:
        "@": GENERIC
      info: Default values for properties of objects in this category. The key cannot
        be empty. Same key can be repeated.
      "@": CATALOG
    class_path:
      info: SUN path to a Javascript file that contains a (base) class for this
        category. May contain an optional class name appended after colon ':'.
        If the class name is missing (no colon), default import from the file is
        used.
      "@": STRING
    class_name:
      info: Custom internal name for the Class of this category, for debugging. Also
        used as an alias when exporting the Class from the category's module.
      "@": STRING
    class_init:
      repeated: true
      info: Module-level initialization for this category's Javascript class.
        Typically contains import statements and global variables. Precedes the
        Class definition (`class_body`, `views`) in the category's module code.
      "@": CODE
    class_body:
      repeated: true
      info: Source code of the class (a body without heading) that will be created for
        this category. The class inherits from the `class_path` class, or the
        class of the first base category, or the top-level Item.
      "@": CODE
    pages:
      values:
        "@": CODE
      info: Source code of functions that generate static HTML response for particular
        access methods of this category's items.
      "@": CATALOG
    views:
      values:
        "@": CODE
      info: "Body of React functional components (no function header) to be added
        dynamically to the category's Class body as VIEW_name(props) methods for
        rendering item views. Inside the function body, `this` refers the item
        to be rendered. Alternatively, the code of each view may consist of a
        method header, view() {...}, and be accompanied by supporting methods:
        title(), assets() - like in a class body."
      "@": CATALOG
    default_endpoints:
      values:
        "@": STRING
      info: List of [PROTOCOL, endpoint] pairs that define default endpoint(s) for
        objects of this category when requested via a URL with no explicit
        endpoint.
      default:
        GET: home
        GET/2: admin
        CALL: self
        "@": Catalog
      "@": CATALOG
    html_assets:
      info: HTML code to be inserted in the html/head section of every page that is
        rendered from a view function of this category.
      "@": CODE
    cache_ttl:
      default: 5
      info: Time To Live (TTL). Determines for how long (in seconds) an item of this
        category is kept in a server-side cache after being loaded from DB, for
        reuse by subsequent requests. A real number. If zero, the items are
        evicted immediately after each request.
      "@": NUMBER
    fields:
      values:
        "@": TYPE
      info: Fields must have unique names.
      "@": CATALOG
    item_schema:
      info: The DATA schema for this category's items. A virtual (non-editable) field
        automatically imputed from the `fields` property.
      "@": ITEM_SCHEMA
    allow_custom_fields:
      default: false
      info: If true, it is allowed to use undefined (out-of-schema) fields in items -
        their schema is GENERIC()
      "@": BOOLEAN
    "@": Catalog
  defaults:
    _class_: Category
    _container_:
      "@": 1014
    _actions_:
      list_items: POST/read:list_items
      create_item: POST/create_item
      "@": Catalog
    fields:
      _category_:
        info: Category of this item. Determines item's behavior and the schema of its
          attributes. Each category should be an item of the Root Category
          (IID=0).
        "@": ITEM
      _class_:
        info: Javascript class (identified by a class path) to be assigned to the object
          after it is loaded from DB.
        "@": STRING
      _extends_:
        info: An item that serves as a prototype for this one, that is, provides default
          values for missing properties of this item. Multiple prototypes are
          allowed, the first one has priority over subsequent ones. Prototypes
          can be defined for regular items or categories - the latter case
          represents category inheritance. Items/categories may inherit
          individual entries from catalog-valued fields, see
          Item.getInherited(). In this way, subcategories inherit individual
          field schemas as defined in base categories.
        inherit: false
        "@": ITEM
      _container_:
        info: Parent URL container of this object. The chain of containers leading from
          Site to the object define the access path of this object, which can be
          converted to a canonical URL path of the object by removing blank
          segments.
        "@": ITEM
      _status_:
        info: Set to "DRAFT" if the object's record is not yet fully initialized in the
          database.
        inherit: false
        "@": STRING
      _actions_:
        values:
          "@": STRING
        info: Network actions (remote methods). Every declaration consists of a full
          endpoint name, e.g., "GET/endpoint", possibly followed by a
          ":"-separated list of arguments, e.g., "GET/endpoint:arg1:arg2". The
          action name must be unique.
        default:
          delete_self: POST/edit:delete_self
          insert_field: POST/edit:insert_field
          delete_field: POST/edit:delete_field
          update_field: POST/edit:update_field
          move_field: POST/edit:move_field
          "@": Catalog
        "@": CATALOG
      name:
        info: Display name of the item. May contain spaces, punctuation, non-latin
          characters.
        default: ""
        "@": STRING
      info:
        info: Description of the item.
        "@": TEXT
      html_title:
        info: HTML title to be used for when this item is rendered.
        "@": STRING
      "@": Catalog
    "@": Catalog
  "@": Data
- __id: 1
  name: Site
  info: Top-level URL routing + global configuration of applications, servers,
    startup.
  fields:
    base_url:
      info: "Base URL at which the website is served: protocol + domain + root path
        (if any); no trailing '/'."
      "@": STRING
    database:
      info: Database instance that contains all data of this site
      "@": ITEM
    entries:
      values:
        "@": ITEM
      repeated: true
      info: URL prefixes (as keys) mapped to items that shall perform routing of
        requests whose URLs start with a given prefix. NO leading/trailing
        slashes.
      "@": CATALOG
    default_path:
      info: URL path of a default container that can be used to access any object via
        its ID. For internal purposes. Should contain a leading slash and no
        trailing slash.
      "@": PATH
    _path_:
      default: /
      "@": STRING
    _url_:
      default: /
      "@": STRING
    "@": Catalog
  defaults:
    _class_: std.Site
    "@": Catalog
  _category_:
    "@": 0
  "@": Data
- __id: 3
  name: File
  info: File with a text content.
  fields:
    content:
      "@": CODE
    mimetype:
      info: MIME type string (must include '/') to be set as Content-Type when serving
        file download; or an extension ('js', 'jpg', ...) to be converted to an
        appropriate type. If missing, response mimetype is inferred from the URL
        path extension, if present.
      "@": STRING
    format:
      "@": STRING
    _is_file:
      default: true
      "@": BOOLEAN
    "@": Catalog
  defaults:
    _class_: std.File
    "@": Catalog
  _category_:
    "@": 0
  "@": Data
- __id: 4
  name: FileLocal
  info: File located on a local disk, identified by its local file path.
  _extends_:
    "@": 3
  fields:
    local_path:
      "@": STRING
    "@": Catalog
  defaults:
    _class_: std.FileLocal
    "@": Catalog
  _category_:
    "@": 0
  "@": Data
- __id: 5
  name: Directory
  info: A directory of files, each file has a unique name (path). May contain
    nested directories.
  fields:
    entries:
      values:
        "@": ITEM
      "@": CATALOG
    _is_folder:
      default: true
      "@": BOOLEAN
    "@": Catalog
  defaults:
    _class_: std.Directory
    "@": Catalog
  _category_:
    "@": 0
  "@": Data
- __id: 6
  name: LocalFolder
  info: |-
    File folder located on a local disk, identified by its local file path.
    Gives access to all files and folders beneath the path.
  _extends_:
    "@": 5
  fields:
    local_path:
      "@": STRING
    "@": Catalog
  defaults:
    _class_: std.LocalFolder
    "@": Catalog
  _category_:
    "@": 0
  "@": Data
- __id: 7
  name: Namespace
  info: Category of application records. An application groups all spaces &
    categories available in the system and provides system-level configuration.
  defaults:
    _class_: std.Namespace
    "@": Catalog
  _category_:
    "@": 0
  "@": Data
- __id: 8
  name: ID_Namespace
  info: Namespace that serves items on simple URLs of the form /IID. Mainly used
    for system & admin purposes, or as a last-resort default for URL generation.
  fields:
    category:
      category:
        "@": 0
      info: Optional category(ies) of items handled by this application.
      "@": ITEM
    "@": Catalog
  defaults:
    _class_: std.ID_Namespace
    "@": Catalog
  _category_:
    "@": 0
  "@": Data
- __id: 9
  name: CategoryID_Namespace
  info: "Namespace for accessing public data through verbose paths of the form:
    .../SPACE:IID, where SPACE is a text identifier assigned to a category in
    `spaces` property."
  fields:
    spaces:
      values:
        category:
          "@": 0
        "@": ITEM
      "@": CATALOG
    "@": Catalog
  defaults:
    _class_: std.CategoryID_Namespace
    "@": Catalog
  _category_:
    "@": 0
  "@": Data
- __id: 10
  name: Type
  info: Category of items that represent data types. Some of the items are
    wrappers around system types (STRING, INTEGER etc.), while some others
    implement new types by themselves using dynamic code.
  class_path: /system/local/type_item.js:TypeItem
  fields:
    class_path:
      "@": STRING
    encode:
      info: Body of a function with the signature `encode(obj,props={})`. Should
        return a state that encodes the input object/value, `obj`.
      "@": CODE
    decode:
      "@": CODE
    initial:
      "@": GENERIC
    properties:
      values:
        "@": TYPE
      "@": CATALOG
    "@": Catalog
  _category_:
    "@": 0
  "@": Data
- __id: 11
  name: Database
  info: Internal database. An array of data Rings stacked on top of each other.
  fields:
    rings:
      info: Array of Ring objects
      "@": GENERIC
    "@": Catalog
  defaults:
    _class_: db.Database
    "@": Catalog
  _category_:
    "@": 0
  "@": Data
- __id: 12
  name: Ring
  info: Category for data rings, i.e., stackable database layers in a Database
    object.
  fields:
    readonly:
      "@": BOOLEAN
    start_id:
      info: the lowest ID allowed in this ring
      "@": INTEGER
    stop_id:
      info: upper bound for IDs in this ring (all IDs must be strictly lower than
        this)
      "@": INTEGER
    data_sequence:
      info: DataSequence that keeps all primary objects of this ring
      category:
        "@": 14
      "@": ITEM
    indexes:
      info: Map of Indexes and their names
      "@": GENERIC
    "@": Catalog
  defaults:
    _class_: db.Ring
    "@": Catalog
  _category_:
    "@": 0
  "@": Data
- __id: 13
  name: Sequence
  info: Base category for sequences of key-value records, either data or indexes.
  fields:
    ring:
      info: parent Ring of this sequence
      category:
        "@": 12
      "@": ITEM
    schema:
      info: schema of records in this sequence as SequenceSchema
      "@": GENERIC
    blocks:
      info: array of Blocks containing records of this sequence
      "@": GENERIC
    derived:
      info: array of derived sequences (indexes) that must be updated when this
        sequence changes
      "@": GENERIC
    flush_delay:
      info: for how long [sec] the local-file data flush can be delayed waiting for
        more writes to arrive that can be grouped together
      "@": NUMBER
    "@": Catalog
  _category_:
    "@": 0
  "@": Data
- __id: 14
  name: DataSequence
  info: Category for the main data sequence that contains serialized web objects.
  fields:
    "@": Catalog
  defaults:
    _class_: db.DataSequence
    "@": Catalog
  _extends_:
    "@": 13
  _category_:
    "@": 0
  "@": Data
- __id: 15
  name: Index
  info: Base category for (derived) sequences that represent indexes over another
    (source) sequence.
  fields:
    source:
      info: source Sequence that feeds data to this index
      "@": ITEM
    "@": Catalog
  _extends_:
    "@": 13
  _category_:
    "@": 0
  "@": Data
- __id: 16
  name: DataIndex
  info: An Index that receives record updates from the main data sequence, so
    input records represent objects.
  fields:
    "@": Catalog
  _extends_:
    "@": 15
  _category_:
    "@": 0
  "@": Data
- __id: 17
  name: IndexByCategory
  info: "Index that maps categories to member objects: the key is [category ID,
    item ID]."
  fields:
    "@": Catalog
  defaults:
    _class_: db.IndexByCategory
    "@": Catalog
  _extends_:
    "@": 16
  _category_:
    "@": 0
  "@": Data
- __id: 18
  name: Block
  info: A continuous subrange of records of a data/index sequence, physically
    located on a single machine.
  fields:
    sequence:
      info: parent Sequence this block is a part of
      "@": ITEM
    filename:
      info: path to a local file that contains records of this block
      "@": STRING
    format:
      info: "storage format: data-yaml, index-jl, rocksdb (in the future), ..."
      "@": STRING
    "@": Catalog
  _category_:
    "@": 0
  "@": Data
- __id: 19
  name: DataBlock
  info: Block of a DataSequence.
  fields:
    "@": Catalog
  defaults:
    _class_: db.DataBlock
    "@": Catalog
  _extends_:
    "@": 18
  _category_:
    "@": 0
  "@": Data
- __id: 20
  name: IndexBlock
  info: Block of an Index sequence.
  fields:
    "@": Catalog
  defaults:
    _class_: db.IndexBlock
    "@": Catalog
  _extends_:
    "@": 18
  _category_:
    "@": 0
  "@": Data
