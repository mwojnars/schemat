- __id: 1
  name: Category
  info: Root category. Category of objects that represent categories. Is a
    category for itself and for other categories.
  schema:
    class:
      info: 'Import path of the JS class (e.g., "path/.../file.js:ClassName") to be
        linked to the objects of this category upon object.load(). Can be
        overridden on a per-object basis by setting object.__class property.
        Importantly, `class` impacts the category itself: all *static* endpoints
        defined in this class are treated as endpoints of the category object,
        not instances.'
      default: schemat:WebObject
      "@": schemat/types/type.js:STRING
    defaults:
      value_type:
        "@": schemat/types/type.js:GENERIC
      info: Default values for properties of objects in this category. The key cannot
        be empty. Same key can be repeated.
      "@": schemat/types/catalog_type.js:CATALOG
    class_name:
      info: Custom internal name for the Class of this category, for debugging. Also
        used as an alias when exporting the Class from the category's module.
      "@": schemat/types/type.js:STRING
    class_init:
      repeated: true
      info: Module-level initialization for this category's Javascript class.
        Typically contains import statements and global variables. Precedes the
        Class definition (`class_body`, `views`) in the category's module code.
      "@": schemat/types/type.js:CODE
    class_body:
      repeated: true
      info: Source code of the class (a body without heading) that will be created for
        this category. The class inherits from the `class`, or the class of the
        first base category, or the top-level WebObject.
      "@": schemat/types/type.js:CODE
    pages:
      value_type:
        "@": schemat/types/type.js:CODE
      info: Source code of functions that generate static HTML response for particular
        access methods of this category's items.
      "@": schemat/types/catalog_type.js:CATALOG
    views:
      value_type:
        "@": schemat/types/type.js:CODE
      info: "Body of React functional components (no function header) to be added
        dynamically to the category's Class body as VIEW_name(props) methods for
        rendering item views. Inside the function body, `this` refers the item
        to be rendered. Alternatively, the code of each view may consist of a
        method header, view() {...}, and be accompanied by supporting methods:
        title(), assets() - like in a class body."
      "@": schemat/types/catalog_type.js:CATALOG
    default_endpoints:
      value_type:
        "@": schemat/types/type.js:STRING
      info: List of [PROTOCOL, endpoint] pairs that define default endpoint(s) for
        objects of this category when requested via a URL with no explicit
        endpoint.
      default:
        GET: view
        GET/2: admin
        GET/3: inspect
        LOCAL: self
        "@": schemat:Catalog
      "@": schemat/types/catalog_type.js:CATALOG
    schema:
      value_type:
        "@": schemat/types/type.js:TYPE
      info: Names and data types of properties of objects in this category.
      "@": schemat/types/catalog_type.js:CATALOG
    allow_custom_fields:
      default: false
      info: If true, it is allowed to set undeclared (out-of-schema) fields in objects
        - their schema is GENERIC()
      "@": schemat/types/type.js:BOOLEAN
    set_version:
      default: false
      info: If true, updated or newly created objects of this category receive the
        __ver property that holds this object's version number (1,2,3,...) and
        is automatically incremented on every update.
      "@": schemat/types/type.js:BOOLEAN
    save_revisions:
      default: false
      info: If true, old versions of objects in this category are preserved on every
        update by creating an immutable Revision that stores the object's
        previous content. The most recently created revision is available in the
        __prev property of the target object.
      "@": schemat/types/type.js:BOOLEAN
    seal_dependencies:
      default: false
      info: If true, __seal is stored and recomputed on every update of an object to
        capture version numbers of all its dependencies (prototypes and
        categories). If __seal is present, the object's dependencies are
        recreated in these specific versions upon object.load(), which ensures
        the exact same behaviour of the object unless influenced by external
        factors. During update, the seal is recomputed to reflect the latest
        version numbers of each dependency. Typically used to seal dependencies
        of category objects. Requires that the object has a __ver number and all
        its dependencies have a __seal. When the object has no dependencies, its
        seal is '.', otherwise it's a dot-concatenated string of version numbers
        of the dependencies.
      "@": schemat/types/type.js:BOOLEAN
    immutable:
      default: false
      info: If true, objects of this category cannot be modified after creation.
      "@": schemat/types/type.js:BOOLEAN
    cache_timeout:
      default: 10
      info: Time To Live (TTL) of objects in this category, in seconds. Only used when
        an instance-level `__ttl` is missing. Determines for how long a
        fully-loaded object is kept in the local cache (Registry) and reused
        after being loaded from DB. If zero, the object is evicted on the
        nearest cache purge. A real number. Recommended values are between 1.0
        and 600. DO NOT set this too high, because TTL is the *only* mechanism
        that drives server-side object cache eviction and setting a high TTL for
        multiple objects may fill out the cache, even if these objects are no
        longer used.
      "@": schemat/types/type.js:NUMBER
    garbage_collect:
      default: false
      info: If true, objects of this category are automatically removed (TODO) if not
        referenced through a REF from any other object; the reference must *not*
        be buried inside any custom data structure. Use this setting with
        caution, only for supporting objects like Revision etc., whose permanent
        deletion is desirable after the removal of the main object, NOT for core
        data objects.
      "@": schemat/types/type.js:BOOLEAN
    "@": schemat:Catalog
  defaults:
    schema:
      name:
        info: Display name of the object. May contain spaces, punctuation, non-latin
          characters.
        repeated: true
        default: ""
        "@": schemat/types/type.js:STRING
      info:
        info: Description or summary of the object.
        repeated: true
        "@": schemat/types/type.js:TEXT
      id:
        getter: true
        info: Type definition for the special property `obj.id` (database record ID) of
          every web object. In the database, this property is stored as a record
          key, separately from regular properties which are stored in a record
          value.
        "@": schemat/types/type.js:ID
      __cid:
        getter: true
        repeated: true
        info: Type definition for special properties, `obj.__cid` and `obj.__cid$`, of
          every web object. These properties (getters) return ID(s) of the first
          __category, or all __category$, or the web object.
        "@": schemat/types/type.js:ID
      __category:
        info: Category of this object. Determines its behavior and the schema of its
          properties. Each category itself is an object of the Root Category
          (ID=1).
        repeated: true
        "@": schemat/types/type.js:REF
      __class:
        info: Import path of the JS class ("path/file.js:ClassName") that will be linked
          to this object during loading. This property overrides the
          category-wise setting (__category.class).
        "@": schemat/types/type.js:IMPORT
      __prototype:
        info: An object that serves as a prototype for this one, that is, provides
          default values for missing properties. Multiple prototypes are
          allowed, the first one has priority over subsequent ones. Prototypes
          can be defined for regular objects and for categories - the latter
          case represents category inheritance. Objects/categories may inherit
          individual entries from catalog-valued fields (catalogs are merged,
          not overwritten during inheritance). For example, in this way,
          subcategories inherit individual field schemas from base categories,
          and may add their own fields to the existing ones.
        repeated: true
        inherit: false
        "@": schemat/types/type.js:REF
      __container:
        info: Parent URL container of this object. The chain of containers leading from
          the root container to a given object defines the access path of this
          object, which can be converted to a canonical URL path of the object
          by removing blank segments. If __container is missing, the default URL
          path is used for the object (/$/id/<id>).
        "@": schemat/types/type.js:REF
      __ident:
        getter: true
        "@": schemat/types/type.js:STRING
      __path:
        impute: _impute__path
        "@": schemat/types/type.js:STRING
      __url:
        getter: true
        "@": schemat/types/type.js:STRING
      __status:
        info: Contains "DELETED" if the corresponding record was deleted from the
          database (a "tombstone" record; not saved in the data block, but used
          elsewhere to propagate the information about the object removal).
        inherit: false
        "@": schemat/types/type.js:STRING
      __ttl:
        info: Time To Live (TTL) of the object, in seconds. Determines for how long the
          object is kept in a server-side cache and reused after being loaded
          from DB. If zero, the object is evicted on the nearest cache purge. A
          real number. Recommended values are between 1.0 and 600. DO NOT set
          this too high, because TTL is the *only* mechanism that drives
          server-side object cache eviction and setting a high TTL for multiple
          objects may fill out the cache, even if these objects are no longer
          used.
        impute: _impute__ttl
        "@": schemat/types/type.js:NUMBER
      __ver:
        info: Version number of the object's content, automatically incremented on every
          update.
        min: 1
        inherit: false
        "@": schemat/types/type.js:INTEGER
      __prev:
        info: The most recent Revision created for the object. Contains the previous
          state of this object (from before the last update).
        inherit: false
        "@": schemat/types/type.js:REF
      "@": schemat:Catalog
    "@": schemat:Catalog
  set_version: false
  save_revisions: false
  seal_dependencies: false
  cache_timeout: 60
  class: schemat:Category
- __id: 2
  name: Site
  info: Top-level URL routing + global configuration of applications, servers,
    startup.
  class: schemat/std/site.js:Site
  schema:
    cluster:
      info: A Cluster of compute & storage nodes that host this site and database.
      "@": schemat/types/type.js:REF
    database:
      info: Database instance that contains all data of this site
      "@": schemat/types/type.js:REF
    webserver:
      info: A WebServer that handles all web requests.
      "@": schemat/types/type.js:REF
    logger:
      info: Logger object that collects all log messages produced in the cluster.
      category:
        "@": 33
      "@": schemat/types/type.js:REF
    root:
      info: "Root of the object hierarchy and the starting point for URL routing: each
        URL path is mapped to an object placed somewhere below the `root`
        container."
      category:
        "@": 3
      "@": schemat/types/type.js:REF
    default_path:
      info: URL path of a default container that can be used to access any object via
        its ID. For internal purposes. Should contain a leading slash and no
        trailing slash.
      "@": schemat/types/type.js:PATH
    global:
      value_type:
        "@": schemat/types/type.js:REF
      info: A catalog of essential application objects - typically categories - that
        will be loaded and made globally available to the application code via
        `globalThis.XXX` right after initialization of `schemat.site` object.
      "@": schemat/types/catalog_type.js:CATALOG
    cache_purge_interval:
      default: 10
      info: Interval [sec] at which the server-side cache is purged from expired
        objects. A real number.
      "@": schemat/types/type.js:NUMBER
    eval_allowed:
      default: false
      info: If true, schemat.site.POST.eval() and schemat.eval() are allowed to be
        executed.
      "@": schemat/types/type.js:BOOLEAN
    "@": schemat:Catalog
  __prototype:
    "@": 5
  __category:
    "@": 1
  __container:
    "@": 1009
- __id: 3
  name: Container
  __category:
    "@": 1
  schema:
    _is_container:
      default: true
      "@": schemat/types/type.js:BOOLEAN
    "@": schemat:Catalog
- __id: 4
  name: File
  info: File with a text content.
  schema:
    content:
      "@": schemat/types/type.js:CODE
    mimetype:
      info: MIME type string (must include '/') to be set as Content-Type when serving
        file download; or an extension ('js', 'jpg', ...) to be converted to an
        appropriate type. If missing, response mimetype is inferred from the URL
        path extension, if present.
      "@": schemat/types/type.js:STRING
    format:
      "@": schemat/types/type.js:STRING
    "@": schemat:Catalog
  class: schemat/std/files.js:File
  __category:
    "@": 1
  __container:
    "@": 1009
- __id: 5
  name: Directory
  info: >-
    A container that keeps an explicit list of named `entries`: regular objects
    or nested containers. Behaves like a file directory in a local file system,
    but contains web objects, not just files. 


    See also the Namespace containers for unbounded collections of objects with dynamically assigned names.
  schema:
    entries:
      value_type:
        "@": schemat/types/type.js:REF
      "@": schemat/types/catalog_type.js:CATALOG
    "@": schemat:Catalog
  class: schemat/std/containers.js:Directory
  __prototype:
    "@": 3
  __category:
    "@": 1
- __id: 6
  name: LocalDirectory
  info: A Directory whose content is located on a local disk, in the folder
    identified by `local_path`. Translates all URL requests to file paths inside
    `local_path`. The files located outside this folder and accessed via ".."
    are *not* returned. Only the files whose extension is listed in
    `extensions_allowed` (case insensitive) are returned.
  schema:
    local_path:
      "@": schemat/types/type.js:STRING
    extensions_allowed:
      default: html htm xml css postcss pcss js ejs jpg jpeg png gif bmp svg mp3 mp4
        wav pdf webp ico ttf woff woff2
      info: Space-separated list of extensions (case insensitive) of files that are
        allowed to be returned from inside this local directory. Requests for
        files that have any other extension are treated as invalid and result in
        'URL not found' error.
      "@": schemat/types/type.js:STRING
    paths_forbidden:
      default: /_ /.git /.svn/
      info: Space-separated list of substrings that must NOT occur in the target file
        path after its translation from the URL. If any of these substrings is
        present, 'URL not found' error is returned regardless of the target file
        extension.
      "@": schemat/types/type.js:STRING
    paths_allowed:
      default: robots.txt ads.txt security.txt humans.txt manifest.json
      info: Explicit list of file paths, space-separated, that are allowed to be
        served even if excluded by other rules (e.g., due to missing or
        disallowed extension). NO leading slash.
      "@": schemat/types/type.js:STRING
    "@": schemat:Catalog
  class: schemat/std/files.js:LocalDirectory
  __prototype:
    "@": 5
  __category:
    "@": 1
  __container:
    "@": 1009
- __id: 7
  name: Namespace
  info: "Unbounded collection of objects: each object that satisfies the criteria
    of the namespace is accepted and can receive a (dynamically created) unique
    identifier, typically built from the object's ID. Typically, a namespace is
    placed as a leaf node on a URL route and does not contain nested
    containers."
  class: schemat/std/containers.js:Namespace
  __prototype:
    "@": 3
  __category:
    "@": 1
  __container:
    "@": 1009
- __id: 8
  name: ObjectSpace
  info: Namespace that maps all objects to URLs of the form /<ID>. Optionally
    restricted to a specific category(ies) of objects.
  schema:
    category:
      category:
        "@": 1
      info: Optional category(ies) of objects to be included in this namespace. Every
        object that is not an instance of at least one of these categories is
        excluded.
      "@": schemat/types/type.js:REF
    "@": schemat:Catalog
  class: schemat/std/containers.js:ObjectSpace
  __prototype:
    "@": 7
  __category:
    "@": 1
  __container:
    "@": 1009
- __id: 9
  name: Category_IID_Namespace
  info: "Namespace for accessing public data through verbose paths of the form:
    .../SPACE:ID, where SPACE is a text identifier assigned to a category in
    `spaces` property."
  schema:
    spaces:
      value_type:
        category:
          "@": 1
        "@": schemat/types/type.js:REF
      "@": schemat/types/catalog_type.js:CATALOG
    "@": schemat:Catalog
  class: schemat/std/containers.js:Category_IID_Namespace
  __prototype:
    "@": 7
  __category:
    "@": 1
- __id: 10
  name: Cluster
  __category:
    "@": 1
  schema:
    "@": schemat:Catalog
- __id: 11
  name: Database
  info: Internal database. An array of data Rings stacked on top of each other,
    represented by a reference to the top ring.
  schema:
    top_ring:
      info: Reference to the top-most Ring of this database. Other rings are found by
        following the `lower_ring` property.
      category:
        "@": 12
      "@": schemat/types/type.js:REF
    top_ring_writable:
      default: true
      info: If true, write access to the database is allowed, otherwise it is not.
      "@": schemat/types/type.js:BOOLEAN
    "@": schemat:Catalog
  class: schemat/db/db.js:Database
  __category:
    "@": 1
- __id: 12
  name: Ring
  info: Category for data rings, i.e., stackable database layers in a Database
    object.
  schema:
    lower_ring:
      info: Reference to the lower ring. If an object is not found in this ring, it is
        searched for in the lower_ring.
      category:
        "@": 12
      "@": schemat/types/type.js:REF
    lower_ring_writable:
      default: false
      info: If true, read-write requests that originate in this ring and need to be
        forwarded down to the lower_ring (and deeper) for the 'read' part, can
        write their updates over there instead of being forwarded back up to
        this ring for the 'write` part of the operation.
      "@": schemat/types/type.js:BOOLEAN
    readonly:
      "@": schemat/types/type.js:BOOLEAN
    start_id:
      info: the lowest ID allowed in this ring
      "@": schemat/types/type.js:INTEGER
    stop_id:
      info: upper bound for IDs in this ring (all IDs must be strictly lower than
        this)
      "@": schemat/types/type.js:INTEGER
    data_sequence:
      info: DataSequence that keeps all primary objects of this ring
      category:
        "@": 14
      "@": schemat/types/type.js:REF
    streams:
      info: List of (named) data streams present in this ring. The 'objects' stream is
        obligatory, as the primary stream containing web objects and providing
        input data for other (derived) streams.
      value_type:
        "@": schemat/types/type.js:REF
      "@": schemat/types/catalog_type.js:CATALOG
    "@": schemat:Catalog
  class: schemat/db/db.js:Ring
  __category:
    "@": 1
- __id: 13
  name: Sequence
  info: Base category for sequences of key-value records, either data or indexes.
  schema:
    ring:
      info: parent Ring of this sequence
      category:
        "@": 12
      "@": schemat/types/type.js:REF
    blocks:
      info: array of Blocks containing records of this sequence
      type:
        category:
          "@": 18
        "@": schemat/types/type.js:REF
      "@": schemat/types/type.js:ARRAY
    flush_delay:
      info: for how long [sec] the local-file data flush can be delayed waiting for
        more writes to arrive that can be grouped together
      "@": schemat/types/type.js:NUMBER
    "@": schemat:Catalog
  defaults:
    flush_delay: 0.01
    "@": schemat:Catalog
  __category:
    "@": 1
- __id: 14
  name: DataSequence
  info: Category for the main data sequence that contains serialized web objects.
  class: schemat/db/sequence.js:DataSequence
  __prototype:
    "@": 13
  __category:
    "@": 1
- __id: 15
  name: IndexOperator
  info: Base category for indexes over the data sequence.
  __prototype:
    "@": 24
  __category:
    "@": 1
  __container:
    "@": 1009
- __id: 16
  name: ObjectIndexOperator
  info: An index that receives record updates from the main data sequence, so
    input records represent objects.
  schema:
    category:
      info: Optional reference to a category object. If present, only the objects
        belonging to this category are included in the index.
      "@": schemat/types/type.js:REF_CATEGORY
    key:
      info: Array of names of object properties to be included in the (compound) key
        of this index. Plural names (xyz$) and deep paths (x.y.z; x.y.z$) are
        allowed.
      type:
        "@": schemat/types/type.js:STRING
      "@": schemat/types/type.js:ARRAY
    "@": schemat:Catalog
  class: schemat/db/indexes.js:ObjectIndexOperator
  __prototype:
    "@": 15
  __category:
    "@": 1
  __container:
    "@": 1009
- __id: 17
  name: Stream
  schema:
    ring:
      info: The parent Ring of this data stream.
      category:
        "@": 12
      "@": schemat/types/type.js:REF
    operator:
      info: The Operator that implements data processing logic of this stream.
      category:
        "@": 24
      "@": schemat/types/type.js:REF
    sequence:
      info: The underlying Sequence where the records of this stream are stored.
      category:
        "@": 13
      "@": schemat/types/type.js:REF
    "@": schemat:Catalog
  __category:
    "@": 1
- __id: 18
  name: Block
  info: A continuous subrange of records of a data/index sequence, physically
    located on a single machine.
  schema:
    sequence:
      info: parent Sequence this block is a part of
      "@": schemat/types/type.js:REF
    filename:
      info: path to a local file that contains records of this block
      "@": schemat/types/type.js:STRING
    format:
      info: "storage format: data-yaml, index-jl, rocksdb (in the future), ..."
      "@": schemat/types/type.js:STRING
    "@": schemat:Catalog
  __prototype:
    "@": 32
  __category:
    "@": 1
- __id: 19
  name: DataBlock
  info: Block of a DataSequence.
  schema:
    insert_mode:
      "@": schemat/types/type.js:STRING
    "@": schemat:Catalog
  class: schemat/db/block.js:DataBlock
  __prototype:
    "@": 18
  __category:
    "@": 1
- __id: 20
  name: ObjectsStream
  class: schemat/db/sequence.js:ObjectsStream
  __prototype:
    "@": 17
  __category:
    "@": 1
- __id: 21
  name: Node
  class: schemat/server/node.js:Node
  info: Node of a Schemat cluster. Technically, each node is a local (master)
    process launched independently on a particular machine, together with its
    all child (worker) processes. Nodes communicate with each other using Kafka,
    and in this way they form a distributed compute & storage cluster.
  schema:
    agents_installed:
      info: Catalog of all Agent objects installed on this machine.
      default:
        "@": schemat:Catalog
      value_type:
        category:
          "@": 29
        "@": schemat/types/type.js:REF
      "@": schemat/types/catalog_type.js:CATALOG
    agents_running:
      info: Names of installed agents that should be currently running on worker
        processes of this node.
      default: []
      type:
        "@": schemat/types/type.js:STRING
      "@": schemat/types/type.js:ARRAY
    master_agents_running:
      info: Names of installed agents that should be currently running on the master
        process of this node.
      default: []
      type:
        "@": schemat/types/type.js:STRING
      "@": schemat/types/type.js:ARRAY
    refresh_interval:
      default: 10
      info: Duration [in seconds] of a single iteration of the agent execution loop in
        run().
      "@": schemat/types/type.js:NUMBER
    kafka_host:
      default: localhost
      info: Host name to be used by Kafka broker.
      "@": schemat/types/type.js:STRING
    kafka_port:
      default: 9092
      info: TCP port of Kafka broker.
      "@": schemat/types/type.js:INTEGER
    kafka_controller_port:
      default: 9093
      info: Listener port of Kafka controller.
      "@": schemat/types/type.js:INTEGER
    "@": schemat:Catalog
  __category:
    "@": 1
  __container:
    "@": 1009
- __id: 22
  name: IndexSequence
  info: Category for sequences of index records.
  class: schemat/db/sequence.js:IndexSequence
  __prototype:
    "@": 13
  __category:
    "@": 1
- __id: 23
  name: idx_category
  info: "Index of all objects by their category: the key is [category ID, item
    ID], no payload."
  key:
    - __cid$
    - id
  __category:
    "@": 16
- __id: 24
  name: Operator
  schema:
    source:
      info: source Sequence that feeds data to this index
      "@": schemat/types/type.js:REF
    key_spec:
      info: Names and data types of fields comprising the key of this operator's
        output records. If missing, this property is computed dynamically with
        impute_key_spec() method of the Operator subclass.
      impute: impute_key_spec
      key_type:
        "@": schemat/types/type.js:STRING
      value_type:
        "@": schemat/types/type.js:TYPE
      "@": schemat/types/catalog_type.js:CATALOG
    payload:
      info: Names of properties comprising the payload (value) of this operator's
        output records.
      type:
        "@": schemat/types/type.js:STRING
      "@": schemat/types/type.js:ARRAY
    "@": schemat:Catalog
  __category:
    "@": 1
- __id: 25
  name: Page
  info: >-
    A standalone HTML page that is not strictly related to any specific object
    or category and is implemented in its own static file or as a JS function.
    Typically, a landing page, like a home page.


    Pages that are related to a particular object or category are better implemented as view methods (instance-level or static) of the category's Javascript class.
  class: schemat/web/page.js:Page
  schema:
    view_endpoint:
      info: Import path of the page rendering function, `view(request)`, that should
        be used to handle requests at the `::view` endpoint of the URL where
        this Page is deployed.
      "@": schemat/types/type.js:STRING
    "@": schemat:Catalog
  __category:
    "@": 1
- __id: 26
  name: Revision
  info: Immutable snapshot of past content of the `target` object at a particular
    version number.
  class: schemat/core/revision.js:Revision
  schema:
    target:
      info: The object whose older version is stored in this revision.
      "@": schemat/types/type.js:REF
    ver:
      info: Version number of the `target` that is stored in this revision.
      "@": schemat/types/type.js:INTEGER
    data:
      info: JSON-stringified `__data` of the target object at version `ver`.
      "@": schemat/types/type.js:STRING
    "@": schemat:Catalog
  immutable: true
  __category:
    "@": 1
- __id: 27
  name: LocalFile
  info: File located on a local disk, identified by its local file path.
  __prototype:
    "@": 4
  schema:
    local_path:
      "@": schemat/types/type.js:STRING
    "@": schemat:Catalog
  class: schemat/std/files.js:LocalFile
  __category:
    "@": 1
  __container:
    "@": 1009
- __id: 28
  name: IndexStream
  class: schemat/db/sequence.js:IndexStream
  __prototype:
    "@": 17
  __category:
    "@": 1
- __id: 29
  name: Agent
  info: "Base category for web objects that are deployed permanently on a
    particular node in the cluster and perform there a perpetual computation
    loop (event loop, microservice): receive messages/requests from clients,
    generate responses, manage local resources. The agent's clients can be
    located in the cluster or outside of it, depending on the type of agent."
  schema:
    __node:
      info: The node in the cluster where this agent is deployed. Multiple __node
        values can be present.
      repeated: true
      category:
        "@": 21
      "@": schemat/types/type.js:REF
    __num_workers:
      default: 1
      info: How many concurrent workers on the __node should execute this agent's loop
        at the same time. Zero (0) means 'all available'. Most agents need only
        one worker, but some rare types of agents (like a web server) may
        benefit from concurrent execution on multiple workers.
      "@": schemat/types/type.js:INTEGER
    "@": schemat:Catalog
  __category:
    "@": 1
- __id: 30
  name: WebServer
  info: "An agent that implements a web server: a perpetual event loop
    (microservice) that receives web requests from external clients, processes
    them and returns responses over the web."
  class: schemat/server/agent.js:WebServer
  schema:
    host:
      default: 127.0.0.1
      info: IP number of the local network interface where the server should be
        deployed to accept incoming web requests.
      "@": schemat/types/type.js:STRING
    port:
      default: 80
      info: Local port number for incoming HTTP connections where the server should be
        deployed.
      "@": schemat/types/type.js:INTEGER
    request_timeout:
      default: 60
      info: Maximum duration of web request processing, in seconds. After this time,
        the server responds with an error, however, the request processing still
        CONTINUES (!) in the background and may consume resources, simply
        because there is no way in Node.js to terminate an async thread by
        force!
      "@": schemat/types/type.js:NUMBER
    "@": schemat:Catalog
  __prototype:
    "@": 29
  __category:
    "@": 1
- __id: 31
  name: KafkaBroker
  class: schemat/server/kafka.js:KafkaBroker
  __prototype:
    "@": 29
  __category:
    "@": 1
- __id: 32
  name: KafkaAgent
  info: An agent that - depending on the settings - creates a shared Kafka client,
    a permanently-connected Kafka producer, and/or a Kafka consumer that
    forwards all incoming messages to the __consume__() method.
  schema:
    start_client:
      default: false
      info: If true, this agent starts a new KafkaJS client. Otherwise, the global
        schemat.node.kafka_client is used.
      "@": schemat/types/type.js:BOOLEAN
    start_producer:
      default: false
      info: If true, this agent starts a permanently-connected Kafka producer that can
        possibly be used by other objects running on the node. Typically, this
        is only used to create a shared singleton producer (one per node)
        managed by the Node instance.
      "@": schemat/types/type.js:BOOLEAN
    start_consumer:
      default: true
      info: If true, this agent starts a Kafka consumer that listens on a dedicated
        Kafka topic and forwards messages to the __consume__() method. This
        option should be `true` in majority of agents that subclass KafkaAgent
        (i.e., in any agent that processes incoming Kafka messages on its own),
        that is why its default value is true.
      "@": schemat/types/type.js:BOOLEAN
    "@": schemat:Catalog
  class: schemat/server/kafka.js:KafkaAgent
  __prototype:
    "@": 29
  __category:
    "@": 1
- __id: 33
  name: Logger
  class: schemat/server/logger.js:Logger
  __prototype:
    "@": 32
  __category:
    "@": 1
- __id: 34
  name: TCP_Sender
  class: schemat/server/tcp.js:TCP_Sender
  __prototype:
    "@": 29
  __category:
    "@": 1
- __id: 35
  name: TCP_Receiver
  class: schemat/server/tcp.js:TCP_Receiver
  __prototype:
    "@": 29
  __category:
    "@": 1
