import {assert, print, timeout, sleep, utc} from '../common/utils.js'
import {ServerTimeoutError} from "../common/errors.js";
import {WebRequest} from "../web/request.js";
import {WebObject} from "../core/object.js"


/**********************************************************************************************************************/

// export class AgentState {   // AgentData, AgentVariables, Registers
//     /* Internal variables and memory of a running agent. Created in agent.__start__() and __restart__(), and passed
//        to all agent methods: control methods (__stop__() etc.), as well as user methods ($agent.*()).
//      */
//
//     // subclasses can add custom fields here:
//     // ...
//     // alternatively, custom fields are copy-pasted into a vanilla AgentState whenever
//     // a plain custom object {...} is returned from __start__()
// }


export class Agent extends WebObject {
    /* A web object that can be installed on a particular node(s) in the cluster to run a perpetual operation there (a microservice).
       Typically, the agent runs a web server, or an intra-cluster microservice of any kind, with a perpetual event loop.
       The agent is allowed to use local resources of the host node: files, sockets, etc.; with some of them (typically files)
       being allocated/deallocated in __install__/__uninstall__(), while some others (e.g., sockets) in __start__/__stop__().
    */

    __ctx           // Database that provides context of execution for this agent's __start__/__stop__ methods ("user mode"),
                    // and a fallback context for $agent.*() methods if no request-specific RPC context was given;
                    // if missing, kernel's context (cluster) is used ("kernel mode")

    __frame         // AsyncLocalStorage that holds the current Frame of this agent while its agent-method(s) is being called

    get $frame()    { return this.__frame?.getStore() }
    get $state()    { return this.$frame?.state }

    __concurrent    // if true, agent methods of this agent may execute concurrently
    num_workers     // number of concurrent workers per node that should execute this agent's microservice at the same time; -1 = "all available"
    hard_restart
    file_tag        // string to be included in names of files and directories
    switch_context  // if true, commands are executed in the caller's context not the agent's own context

    get file_path() { throw new Error(`file_path not implemented for agent ${this}`) }


    // async __install__(node) {}  // ideally, this method should be idempotent in case of failure and subsequent re-launch
    // async __uninstall__(node) {}
    //
    // __export__()     -- prepare the agent for migration/replication to another node; return a dump to be passed to __import__()
    // __import__()     -- after __install__(), import agent's state from another node using the dump generated by __export__()

    async __start__(frame) {
        /* Start the microservice implemented by this agent. Return an "execution state" which will be accessible
           to agent methods ($agent.*()) via this.$state and will be passed to __stop__() upon agent termination.
           Typically, the state object is a plain JS object with handlers to all the resources that were opened
           during __start__() and should be released in __stop__(). All calls (local or RPC) to agent methods
           are tracked to provide (optional) mutual exclusion and graceful termination.
         */
    }
    async __stop__(state) {
        /* Release any local resources that were acquired during __start__() and are passed here in the `state` of execution. */
    }

    async __restart__(state, prev) {
        /* In many cases, refreshing an agent in the worker process does NOT require full stop+start, which might have undesired side effects
           (temporary unavailability of the microservice). For this reason, __restart__() is called upon agent refresh - it can be customized
           in subclasses, and the default implementation either does nothing (default), or performs the full stop+start cycle (if hard_restart=true).
         */
        if (!this.hard_restart) return state
        await prev.__stop__(state)
        return this.__start__()
    }


    /***  Triggers  ***/

    async '$agent.ping'(state, msg) {
        /* Default RPC endpoint for testing intra-cluster communication. */
        let response = `[${utc()}]  PING: agent [${this.id}], ${msg}`
        print(response)
        return response
    }

    '$agent.pause'() {
        /* Pause the execution of this agent: execution of incoming and pending requests is on hold until $agent.resume().
           This does NOT affect ongoing calls, which run normally until completion. Mainly for debugging.
         */
        let _resolve
        let paused = this.$frame.paused = new Promise(resolve => {_resolve = resolve})
        paused.resolve = _resolve
    }

    '$agent.resume'() {
        this.$frame.paused?.resolve?.()
        this.$frame.paused = false
    }
}


/**********************************************************************************************************************/

// export class Driver extends WebObject {}


/**********************************************************************************************************************
 **
 **  WEB SERVER
 **
 */

export class WebServer extends Agent {
    /* Edge HTTP server based on express.
       For sending & receiving multipart data (HTML+JSON) in http response, see:
       - https://stackoverflow.com/a/50883981/1202674
       - https://stackoverflow.com/a/47067787/1202674
     */

    request_timeout

    async __start__() {
        // let {ServerSchemat} = await import('/$/local/schemat/core/schemat_srv.js')
        // await schemat._reset_class(ServerSchemat)

        // schemat.registry.objects.clear()
        // await schemat._init_app()

        let express = (await import('express')).default
        let bodyParser = (await import('body-parser')).default

        let xapp = express()

        // for official middleware see: https://expressjs.com/en/resources/middleware.html
        // for receiving files:
        //  - multer:      https://www.npmjs.com/package/multer and https://expressjs.com/en/5x/api.html#req.body
        //  - fileupload:  https://www.npmjs.com/package/express-fileupload & https://stackoverflow.com/a/50243907/1202674 (newer one, possibly easier)

        // // set CORS headers in all responses to allow cross-origin requests
        // xapp.use((req, res, next) => {
        //     res.header('Access-Control-Allow-Origin', '*')      // or the specific origin of your client app
        //     res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept')
        //     next()
        // })

        // xapp.use(express.json())                                 // for parsing application/json to req.body object
        xapp.use(express.urlencoded({extended: false}))             // for parsing application/x-www-form-urlencoded
        xapp.use(bodyParser.text({type: '*/*', limit: '10MB'}))     // for setting req.body string from plain-text body (if not json MIME-type)

        xapp.all('*', schemat.with_context((req, res) => this._handle(req, res)))

        let host = schemat.config.host || this.host || schemat.node.http_host
        let port = schemat.config.port || this.port || schemat.node.http_port

        let server = xapp.listen(port, host, schemat.with_context(() => this._print(`listening at http://${host}:${port}`)))
        return {server}
    }

    async __stop__({server}) {
        if (server) await new Promise(resolve => server.close(resolve))
        this._print(`WebServer closed`)
    }

    async _handle(req, res) {
        if (!['GET','POST'].includes(req.method)) return res.sendStatus(405)    // 405 Method Not Allowed
        // print(`handle() worker ${process.pid} started: ${req.path}`)
        // await session.start()

        // // redirection of HTTP to HTTPS
        // httpServer.on('request', (req, res) => {
        //     let httpsUrl = `https://${req.headers.host.replace(HTTP_PORT, HTTPS_PORT)}${req.url}`
        //     res.writeHead(301, { Location: httpsUrl })
        //     res.end()
        // })

        try {
            // await sleep(3)
            let request = new WebRequest({req, res})
            let handler = schemat.app.route(request)

            if (this.request_timeout) {
                let deadline = timeout(this.request_timeout * 1000, new ServerTimeoutError())
                handler = Promise.race([handler, deadline])         // the request is abandoned if it takes too long to process
            }
            let result = await handler
            if (typeof result === 'string') res.send(result)
        }
        catch (ex) {
            this._print(ex)
            if (!res.headersSent)
                if (ex.code === 'ENOENT')                           // file not found error
                    res.status(404).send('File not found')
                else
                    res.status(ex.code || 500).send(ex.message || 'Internal Server Error')
            else
                res.end()               // if headers were sent already, we need to end the response

            // TODO: send cancellation signal (StopRequest interrupt) to the Schemat to terminate all pending load-object operations and stop the remaining computation (esp. on timeout)
        }

        // // TODO: a temporary check to make sure that dynamic imports work fine; drop this in the future
        // let {check} = await schemat.app.import_module("/app/widgets.js")
        // check()

        // await schemat.after_request()
        // print(`handle() worker ${process.pid} finished: ${req.path}`)

        // await sleep(0.2)                 // for testing
        // session.printCounts()
        // await session.stop()
    }
}
