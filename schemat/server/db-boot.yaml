- __id:
    - 0
    - 0
  entries:
    - key: name
      value: Category
    - key: info
      value: Category of items that represent categories
    - key: class
      value: schemat.item.Category
    - key: cache_ttl
      value: 60
    - key: fields
      value:
        entries:
          - key: info
            value:
              info: Description of the category.
              "@": schemat.type.TEXT
          - key: extends
            value:
              info: Base category from which this one inherits properties. Multiple bases are
                allowed, the first one has priority over subsequent ones.
              "@": schemat.type.ITEM
          - key: class
            value:
              info: Full (dotted) name of a Javascript class to be used for items of this
                category. If `code` or `code_*` is configured, the class is
                subclassed dynamically to insert the desired code.
              "@": schemat.type.STRING
          - key: code
            value:
              info: Source code of a subclass (a body without heading) that will be created
                for this category. The subclass inherits from the `class`, or
                the class of the first base category, or the top-level Item.
              "@": schemat.type.CODE
          - key: code_client
            value:
              info: Source code appended to the body of this category's class when the
                category is loaded on a client (exclusively).
              "@": schemat.type.CODE
          - key: code_server
            value:
              info: Source code appended to the body of this category's class when the
                category is loaded on a server (exclusively).
              "@": schemat.type.CODE
          - key: cache_ttl
            value:
              info: Time To Live (TTL). Determines for how long (in seconds) an item of this
                category is kept in a server-side cache after being loaded from
                DB, for reuse by subsequent requests. A real number. If zero,
                the items are evicted immediately after each request.
              default: 5
              "@": schemat.type.NUMBER
          - key: fields
            value:
              info: Fields must have unique names.
              default:
                entries:
                  - key: name
                    value:
                      info: Display name of the item. May contain spaces, punctuation, non-latin
                        characters.
                      "@": schemat.type.STRING
                  - key: prototype
                    value:
                      info: An item of the same category that serves as a prototype for this one, that
                        is, provides default values for missing properties of
                        this item.
                      "@": schemat.type.ITEM
                "@": schemat.data.Catalog
              values:
                "@": schemat.type.SCHEMA
              "@": schemat.type.CATALOG
          - key: startup_site
            value:
              "@": schemat.type.GENERIC
        "@": schemat.data.Catalog
    - key: startup_site
      value:
        - 9
        - 1
  "@": schemat.data.Data
- __id:
    - 0
    - 1
  name: File
  info: File with a text content.
  class: schemat.item.File
  fields:
    content:
      "@": schemat.type.CODE
    mimetype:
      info: MIME type string (must include '/') to be set as Content-Type when serving
        file download; or an extension ('js', 'jpg', ...) to be converted to an
        appropriate type. If missing, response mimetype is inferred from a URL
        path extension, if any.
      "@": schemat.type.STRING
    format:
      "@": schemat.type.STRING
    _is_file:
      default: true
      "@": schemat.type.BOOLEAN
- __id:
    - 0
    - 2
  name: FileLocal
  info: File located on a local disk, identified by its local file path.
  prototype:
    - 0
    - 1
  class: schemat.item.FileLocal
  fields:
    path:
      "@": schemat.type.STRING
- __id:
    - 0
    - 3
  name: Folder
  info: A directory of files, each file has a unique name (path). May contain
    nested directories.
  class: schemat.item.Folder
  fields:
    files:
      keys:
        "@": schemat.type.FILENAME
      values:
        "@": schemat.type.ITEM
      "@": schemat.type.CATALOG
    _is_folder:
      default: true
      "@": schemat.type.BOOLEAN
- __id:
    - 0
    - 4
  name: FolderLocal
  info: |-
    File folder located on a local disk, identified by its local file path.
    Gives access to all files and folders beneath the path.
  prototype:
    - 0
    - 3
  class: schemat.item.FolderLocal
  fields:
    path:
      "@": schemat.type.STRING
- __id:
    - 0
    - 5
  name: Application
  info: Category of application records. An application groups all spaces &
    categories available in the system and provides system-level configuration.
  class: schemat.item.Application
  fields:
    findRoute:
      "@": schemat.type.CODE
    urlPath:
      "@": schemat.type.CODE
- __id:
    - 0
    - 6
  name: Router
  info: A set of sub-applications, each bound to a different URL prefix.
  fields:
    empty_path:
      info: An item to handle the request if the URL path is empty.
      "@": schemat.type.ITEM
    routes:
      values:
        "@": schemat.type.ITEM
      "@": schemat.type.CATALOG
  code: >-
    findRoute(request) {
        let step   = request.step()
        let routes = this.get('routes')
        let route  = routes.get(step)
        if (step && route)  return [route, request.move(step)]
        if (routes.has('')) return [routes.get(''), request]          // default (unnamed) route
    }
- __id:
    - 0
    - 7
  name: AppSystem
  info: Application that serves items on simple URLs of the form /CID:IID, for
    admin purposes.
  class: schemat.item.AppSystem
- __id:
    - 0
    - 8
  name: AppSpaces
  info: "Application for accessing public data through verbose paths of the form:
    .../SPACE:IID, where SPACE is a text identifier assigned to a category in
    `spaces` property."
  class: schemat.item.AppSpaces
  fields:
    spaces:
      values:
        category_exact:
          =:
            - 0
            - 0
          "@": (item)
        "@": schemat.type.ITEM
      "@": schemat.type.CATALOG
- __id:
    - 0
    - 9
  name: Site
  info: Category of site records. A site contains information about applications,
    servers, startup.
  class: schemat.item.Site
  fields:
    base_url:
      info: "Base URL at which the website is served: protocol + domain + root path
        (if any); no trailing '/'."
      "@": schemat.type.STRING
    system_path:
      info: A URL path that when appended to the `base_url` creates a URL of the
        system application, AppSystem - used for internal web access to items.
      "@": schemat.type.STRING
    router:
      info: A Router that performs top-level URL routing to downstream applications
        and file folders.
      "@": schemat.type.ITEM
- __id:
    - 1
    - 1
  content: This is a test file.
- __id:
    - 3
    - 1
  files:
    test.txt:
      - 1
      - 1
- __id:
    - 3
    - 2
  files:
    tmp1:
      - 3
      - 1
- __id:
    - 4
    - 1
  path: /home/marcin/Documents/priv/catalog/src/schemat
- __id:
    - 5
    - 1
  name: AppSystem
  findRoute: |-
    let step = request.step(), id
    try { id = step.split(':').map(Number) }
    catch (ex) { request.throwNotFound() }
    request.setDefaultMethod('@full')
    return [this.registry.getItem(id), request.move(step), true]
  urlPath: |-
    console.log('AppSystem.urlPath()')
    let [cid, iid] = item.id
    return cid + ':' + iid
- __id:
    - 1
    - 2
  content: export let print = console.log
- __id:
    - 1
    - 3
  content: |-
    import {print} from '../site/utils.js'
    export function check() { print('called /site/widgets.js/check()') } 
    //let fs = await importLocal('fs')
    //print('fs:',fs)
- __id:
    - 3
    - 3
  name: /demo
- __id:
    - 3
    - 4
  name: /apps
  files:
    demo:
      - 3
      - 3
- __id:
    - 3
    - 5
  name: /site
  files:
    utils.js:
      - 1
      - 2
    widgets.js:
      - 1
      - 3
- __id:
    - 3
    - 6
  name: /system
  files:
    Application:
      - 0
      - 5
    File:
      - 0
      - 1
    Folder:
      - 0
      - 3
    Site:
      - 0
      - 9
- __id:
    - 8
    - 1
  name: Catalog
  spaces:
    sys.category: 0
    sys.site: 9
    sys.dir: 3
    sys.file: 1
- __id:
    - 6
    - 1
  name: Router
  routes:
    $:
      - 5
      - 1
    apps:
      - 3
      - 4
    site:
      - 3
      - 5
    system:
      - 3
      - 6
    files:
      - 4
      - 1
    "":
      - 8
      - 1
- __id:
    - 9
    - 1
  name: catalog.wiki
  base_url: http://127.0.0.1:3000
  system_path: /$
  router:
    - 6
    - 1
