- id: [0, 0]
  name: Category
  info: Category of items that represent categories
  class_name: hyperweb.item.Category
  schema:
    fields:
      schema:
        schema:
          type: {'=': hyperweb.schema.Record, '@': builtins.type}
          '@': hyperweb.schema.RecordSchema
        default:
          fields: {}
          '@': hyperweb.schema.Record
      name:
        schema: {'@': hyperweb.schema.String}
        info: human-readable title of the category
      info:
        schema: {'@': hyperweb.schema.String}
      class_name:
        schema: {'@': hyperweb.schema.String}
        default: hyperweb.item.Item
        info: Full (dotted) path of a python class. Or the class name that should
          be imported from `class_code` after its execution.
      class_code:
        schema: {'@': hyperweb.schema.Text}
      templates:
        schema:
          keys: {'@': hyperweb.schema.String}
          values: {'@': hyperweb.schema.Text}
          '@': hyperweb.schema.Catalog
        default: {? '' : "\n    context $item, $category as cat, $app, $route, $directory\n\
            \n    style / $app['base_style']\n\n    % print_headline\n           \
            \ p .catlink\n            a href=$route(cat) | {cat['name']? or cat}\n\
            \            | ($item.cid,$item.iid)\n\n    html\n        $name = item['name']?\
            \ or str(item)\n        head\n            title | {name}\n        body\
            \ .page\n            h1  | {name}\n            print_headline\n      \
            \      \n            # $item.print_data x1 x2 x3\n            # @(item.dom_properties())\
            \     -- item's method returns a DOM tree for embedding into a document\n\
            \            # %(item.print_data) x1 x2     -- item's attr is a Hypertag\
            \ that can be used as a tag in a document\n            \n            #\
            \ from APP/pages import %print_data\n            # from /apps/APP/pages\
            \ import %print_data\n            from pages_common import %print_data\n\
            \n            h2 | Properties\n            print_data $item\n"}
  templates: {? '' : "\n    context $item, $category as cat, $app, $route, $directory\n\
      \n    style / $app['base_style']\n\n    html\n        $name = cat['name']? or\
      \ str(cat)\n        head\n            title | {name ' -' }? category #{cat.iid}\n\
      \        body .page\n            h1\n                try\n                 \
      \   i | $name\n                    . | -\n                | category #{cat.iid}\n\
      \n            h2 | Properties\n            \n            from pages_common import\
      \ %print_data\n            print_data $cat\n\n            h2 | Items\n     \
      \       table\n                for item in cat.registry.load_items(cat)\n  \
      \                  tr\n                        td / #{item.iid} &nbsp;\n   \
      \                     td : a href=$route(item)\n                           \
      \ | {item['name']? or item}\n"}
- id: [0, 1]
  info: A directory of items, each item has a unique name (path). May contain nested
    subdirectories. Similar to a file system.
  class_name: hyperweb.item.Directory
  schema:
    fields:
      items:
        schema:
          keys: {'@': hyperweb.schema.EntryName}
          values: {'@': hyperweb.schema.Link}
          '@': hyperweb.schema.Catalog
- id: [0, 2]
  name: Space
  info: Category of items that represent item spaces.
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
      categories:
        schema:
          keys: {'@': hyperweb.schema.String}
          values: {cid: null, '@': hyperweb.schema.Link}
          '@': hyperweb.schema.Catalog
  class_name: Space
  class_code: "\n        from hyperweb.item import Item\n        class Space(Item):\n\
    \            def get_category(self, name):\n                return self['categories'][name]\n\
    \    "
- id: [0, 3]
  name: Application
  info: Category of application records. An application groups all spaces & categories
    available in the system and provides system-level configuration.
  class_name: Application
  class_code: "\n        from hyperweb.item import Item\n        class Application(Item):\n\
    \            def get_space(self, name):\n                return self['spaces'][name]\n\
    \    "
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
      spaces:
        schema:
          keys: {'@': hyperweb.schema.String}
          values: {cid: null, '@': hyperweb.schema.Link}
          '@': hyperweb.schema.Catalog
  folder: {'@': hyperweb.schema.PathString}
- id: [0, 4]
  name: Site
  info: Category of site records. A site contains information about applications,
    servers, startup
  class_name: hyperweb.item.Site
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
      routes:
        schema:
          keys: {'@': hyperweb.schema.String}
          values:
            type: {'=': hyperweb.item.Route, '@': builtins.type}
            fields:
              base:
                schema: {'@': hyperweb.schema.String}
                '@': hyperweb.schema.Field
              path:
                schema: {'@': hyperweb.schema.String}
                '@': hyperweb.schema.Field
              app:
                schema: {cid: null, '@': hyperweb.schema.Link}
                '@': hyperweb.schema.Field
            '@': hyperweb.schema.Struct
          '@': hyperweb.schema.Catalog
        multi: false
        info: dictionary of named URL routes, each route specifies a base URL (protocol+domain),
          fixed URL path prefix, and a target application object
  directory: {cid: null, '@': hyperweb.schema.Link}
- id: [0, 5]
  name: Varia
  info: Category of items that do not belong to any specific category
  class_name: hyperweb.item.Item
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
        multi: true
      title:
        schema: {'@': hyperweb.schema.String}
- id: [0, 6]
  name: Text
  info: A piece of plain or rich text for human consumption. May keep information
    about language and/or markup.
- id: [0, 7]
  name: Code
  info: "A piece of source code. May keep information about programming language.\n\
    \                If Code item is used in a context where a single object (a class,\
    \ a function) is expected,\n                the `name` property must be set and\
    \ equal to the name of the object that should be imported\n                from\
    \ the code after its compilation. Some uses may allow multiple names to be declared.\n\
    \    "
- id: [7, 1]
  lang: hypertag
  code: "\n        %print_data item\n            ul\n                for field, value\
    \ in item.data.items()\n                    li\n                        b | {field}:\n\
    \                        . | {str(value)}\n    "
- id: [1, 1]
  items:
    pages_common: [7, 1]
- id: [2, 1]
  name: Meta
  categories:
    category: [0, 0]
    item: [0, 5]
- id: [2, 2]
  name: System
  categories:
    space: [0, 2]
    app: [0, 3]
    site: [0, 4]
- id: [3, 1]
  name: Catalog.wiki
  spaces:
    meta: [2, 1]
    sys: [2, 2]
  base_style: "\n        body { font: 16px/24px 'Quattrocento Sans', \"Helvetica Neue\"\
    , Helvetica, Arial, sans-serif; }\n        .page { width: 980px; margin: 0 auto;\
    \ overflow: hidden }\n        h1 { font-size: 26px; line-height: 34px; margin-top:\
    \ 30px }\n        .catlink { font-size: 14px; margin-top: -20px }\n    "
  base_widgets: "\n        %properties_list item\n            h2  | Properties\n \
    \           ul\n                for attr, value in item.data.items()\n       \
    \             li\n                        b | {attr}:\n                      \
    \  . | {str(value)}\n    "
- id: [4, 1]
  name: catalog.wiki
  routes:
    default:
      base: http://localhost:8001
      path: /
      app: [3, 1]
  directory:
    '=': [1, 1]
    '@': null
- id: [5, 1]
  title: Ala ma kota Sierściucha i psa Kłapoucha.
- id: [5, 2]
  title: ąłęÓŁŻŹŚ
  name: [test_item, duplicate]
