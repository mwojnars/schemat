- id: [0, 0]
  name: Category
  info: Category of items that represent categories
  class_name: hyperweb.item.Category
  schema:
    fields:
      schema:
        schema:
          type: {'=': hyperweb.schema.Record, '@': builtins.type}
          '@': hyperweb.schema.RecordSchema
      name:
        schema: {'@': hyperweb.schema.String}
        info: human-readable title of the category
      info:
        schema: {'@': hyperweb.schema.String}
      class_name:
        schema: {'@': hyperweb.schema.String}
        default: hyperweb.item.Item
        info: Full (dotted) path of a python class. Or the class name that should
          be imported from `class_code` after its execution.
      class_code:
        schema: {'@': hyperweb.schema.Text}
      templates:
        schema:
          keys: {'@': hyperweb.schema.String}
          values: {'@': hyperweb.schema.Text}
          '@': hyperweb.schema.Catalog
        default: {? '' : "\n    context $view\n    $item = view._item\n    $cat  =\
            \ item.category\n    $app  = view._route.app\n\n    style / $app['base_style']\n\
            \n    % print_headline\n            p .catlink\n            a href=$view.url(cat)\
            \ | {cat['name']? or cat}\n            | ($item.cid,$item.iid)\n\n   \
            \ html\n        $name = item['name']? or str(item)\n        head\n   \
            \         title | {name}\n        body .page\n            h1  | {name}\n\
            \            print_headline\n            # from /site/pages import %print_data\n\
            \            # from /site/app_X/pages import %print_data\n           \
            \ # from /templates import %print_data\n            # from ./pages import\
            \ %print_data\n            # print_data $view\n            # $item.print_data()\n\
            \            # $item.print_data x1 x2 x3\n            # $item.view.data\
            \ x1 x2 x3     # `view` is a complete HT script that exposes multiple\
            \ symbols\n            # $item.data       $paper.title    $paper.data()\n\
            \            # $app['base_widgets']\n            h2  | Properties\n  \
            \          ul\n                for attr, value in item.data.items()\n\
            \                    li\n                        b | {attr}:\n       \
            \                 . | {str(value)}\n"}
  templates: {? '' : "\n    context $view\n    $cat = view._item\n    $app = view._route.app\n\
      \n    style / $app['base_style']\n\n    html\n        $name = cat['name']? or\
      \ str(cat)\n        head\n            title | {name ' -' }? category #{cat.iid}\n\
      \        body .page\n            h1\n                try\n                 \
      \   i | $name\n                    . | -\n                | category #{cat.iid}\n\
      \            h2  | Properties\n            ul\n                for attr, value\
      \ in cat.data.items()\n                    li\n                        b | {attr}:\n\
      \                        . | {str(value)}\n            h2  | Items\n       \
      \     table\n                for item in cat.registry.load_items(cat)\n    \
      \                tr\n                        td / #{item.iid} &nbsp;\n     \
      \                   td : a href=$view.url(item)\n                          \
      \  | {item['name']? or item}\n"}
- id: [0, 1]
  name: Space
  info: Category of items that represent item spaces.
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
      categories:
        schema:
          keys: {'@': hyperweb.schema.String}
          values: {cid: null, '@': hyperweb.schema.Link}
          '@': hyperweb.schema.Catalog
  class_name: Space
  class_code: "\n        from hyperweb.item import Item\n        class Space(Item):\n\
    \            def get_category(self, name):\n                return self['categories'][name]\n\
    \    "
- id: [0, 2]
  name: Application
  info: Category of application records. An application groups all spaces & categories
    available in the system and provides system-level configuration.
  class_name: Application
  class_code: "\n        from hyperweb.item import Item\n        class Application(Item):\n\
    \            def get_space(self, name):\n                return self['spaces'][name]\n\
    \    "
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
      spaces:
        schema:
          keys: {'@': hyperweb.schema.String}
          values: {cid: null, '@': hyperweb.schema.Link}
          '@': hyperweb.schema.Catalog
  path_data: {'@': hyperweb.schema.PathString}
- id: [0, 3]
  name: Site
  info: Category of site records. A site contains information about applications,
    servers, startup
  class_name: hyperweb.item.Site
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
      routes:
        schema:
          keys: {'@': hyperweb.schema.String}
          values:
            type: {'=': hyperweb.item.Route, '@': builtins.type}
            fields:
              base:
                schema: {'@': hyperweb.schema.String}
                '@': hyperweb.schema.Field
              path:
                schema: {'@': hyperweb.schema.String}
                '@': hyperweb.schema.Field
              app:
                schema: {cid: null, '@': hyperweb.schema.Link}
                '@': hyperweb.schema.Field
            '@': hyperweb.schema.Struct
          '@': hyperweb.schema.Catalog
        multi: false
        info: dictionary of named URL routes, each route specifies a base URL (protocol+domain),
          fixed URL path prefix, and a target application object
  directory: {cid: null, '@': hyperweb.schema.Link}
- id: [0, 4]
  name: Varia
  info: Category of items that do not belong to any specific category
  class_name: hyperweb.item.Item
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
        multi: true
      title:
        schema: {'@': hyperweb.schema.String}
- id: [1, 1]
  name: Meta
  categories:
    category: [0, 0]
    item: [0, 4]
- id: [1, 2]
  name: System
  categories:
    space: [0, 1]
    app: [0, 2]
    site: [0, 3]
- id: [2, 1]
  name: Catalog.wiki
  spaces:
    meta: [1, 1]
    sys: [1, 2]
  base_style: "\n        body { font: 16px/24px 'Quattrocento Sans', \"Helvetica Neue\"\
    , Helvetica, Arial, sans-serif; }\n        .page { width: 980px; margin: 0 auto;\
    \ overflow: hidden }\n        h1 { font-size: 26px; line-height: 34px; margin-top:\
    \ 30px }\n        .catlink { font-size: 14px; margin-top: -20px }\n    "
  base_widgets: "\n        %properties_list item\n            h2  | Properties\n \
    \           ul\n                for attr, value in item.data.items()\n       \
    \             li\n                        b | {attr}:\n                      \
    \  . | {str(value)}\n    "
- id: [3, 1]
  name: catalog.wiki
  routes:
    default:
      base: http://localhost:8001
      path: /
      app: [2, 1]
- id: [4, 1]
  title: Ala ma kota Sierściucha i psa Kłapoucha.
- id: [4, 2]
  title: ąłęÓŁŻŹŚ
  name: [test_item, duplicate]
