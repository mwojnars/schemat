- id: [0, 0]
  name: Category
  info: Category of items that represent categories
  class_name: hyperweb.item.Category
  endpoints: {__view__: "\n    context $item as cat, $app, $directory as dir\n\n \
      \   style / $dir.open('base.css')['source']\n\n    html\n        $name = cat['name']?\
      \ or str(cat)\n        head\n            title | {name ' -' }? category #{cat.iid}\n\
      \n        body .page\n            h1\n                try\n                \
      \    i | $name\n                    . | -\n                | category #{cat.iid}\n\
      \n            h2 | Properties\n\n            from base import %print_data\n\
      \            print_data $cat\n\n            h2 | Items\n            table\n\
      \                for item in list(cat.registry.load_items(cat))\n          \
      \          tr\n                        td / #{item.iid} &nbsp;\n           \
      \             td\n                            $ iname = item['name']? or item\n\
      \                            try\n                                a href=app.url(item)\
      \ | $iname\n                            else\n                             \
      \   | $iname (no public URL)\n"}
  fields:
    name:
      schema: {'@': hyperweb.schema.String}
      info: human-readable title of the category
      '@': hyperweb.schema.Field
    info:
      schema: {'@': hyperweb.schema.String}
      '@': hyperweb.schema.Field
    class_name:
      schema: {'@': hyperweb.schema.String}
      default: hyperweb.item.Item
      info: Full (dotted) path of a python class. Or the class name that should be
        imported from `class_code` after its execution.
      '@': hyperweb.schema.Field
    class_code:
      schema: {'@': hyperweb.schema.Text}
      '@': hyperweb.schema.Field
    endpoints:
      schema:
        values: {'@': hyperweb.schema.Text}
        '@': hyperweb.schema.Catalog
      default: {__view__: "\n    context $item, $category as cat, $app, $directory\
          \ as dir\n\n    style / $dir.open('base.css')['source']\n\n    % print_headline\n\
          \            p .catlink\n            a href=$app.url(cat) | {cat['name']?\
          \ or cat}\n            | ($item.cid,$item.iid)\n\n    html\n        $name\
          \ = item['name']? or str(item)\n        head\n            title | {name}\n\
          \        body .page\n            h1  | {name}\n            print_headline\n\
          \            \n            # $item.print_data x1 x2 x3\n            # @(item.dom_properties())\
          \     -- item's method returns a DOM tree for embedding into a document\n\
          \            # %(item.print_data) x1 x2     -- item's attr is a Hypertag\
          \ that can be used as a tag in a document\n            \n            # from\
          \ APP/base import %print_data\n            # from /apps/APP/base import\
          \ %print_data\n            from base import %print_data\n\n            h2\
          \ | Properties\n            print_data $item\n            # print_catalog1\
          \ $item\n"}
      '@': hyperweb.schema.Field
    fields:
      schema:
        values:
          type: {'=': hyperweb.schema.Field, '@': builtins.type}
          '@': hyperweb.schema.FIELD
        type: {'=': hyperweb.schema.FIELDS, '@': builtins.type}
        '@': hyperweb.schema.Catalog
      '@': hyperweb.schema.Field
- id: [0, 1]
  name: Directory
  info: A directory of items, each item has a unique name (path). May contain nested
    subdirectories. Similar to a file system.
  class_name: hyperweb.item.Directory
  fields:
    items:
      schema:
        keys: {'@': hyperweb.schema.EntryName}
        values: {'@': hyperweb.schema.Link}
        '@': hyperweb.schema.Catalog
      '@': hyperweb.schema.Field
- id: [0, 2]
  name: Space
  info: Category of items that represent item spaces.
  fields:
    name:
      schema: {'@': hyperweb.schema.String}
      '@': hyperweb.schema.Field
    categories:
      schema:
        values:
          category:
            '=': [0, 0]
            '@': null
          '@': hyperweb.schema.Link
        '@': hyperweb.schema.Catalog
      '@': hyperweb.schema.Field
  class_name: Space
  class_code: "\n        from hyperweb.item import Item\n        class Space(Item):\n\
    \            def get_category(self, name):\n                return self['categories'][name]\n\
    \    "
- id: [0, 3]
  name: Application
  info: Category of application records. An application groups all spaces & categories
    available in the system and provides system-level configuration.
  class_name: hyperweb.item.Application
  fields:
    name:
      schema: {'@': hyperweb.schema.String}
      '@': hyperweb.schema.Field
    url_scheme:
      schema:
        values: [raw, spaces]
        indices: false
        '@': hyperweb.schema.Enum
      '@': hyperweb.schema.Field
    spaces:
      schema:
        values:
          category:
            '=': [0, 2]
            '@': null
          '@': hyperweb.schema.Link
        '@': hyperweb.schema.Catalog
      '@': hyperweb.schema.Field
  folder: {'@': hyperweb.schema.PathString}
- id: [0, 4]
  name: Site
  info: Category of site records. A site contains information about applications,
    servers, startup
  class_name: hyperweb.item.Site
  fields:
    name:
      schema: {'@': hyperweb.schema.String}
      '@': hyperweb.schema.Field
    apps:
      schema:
        values:
          category:
            '=': [0, 3]
            '@': null
          '@': hyperweb.schema.Link
        '@': hyperweb.schema.Catalog
      '@': hyperweb.schema.Field
  directory:
    category:
      '=': [0, 1]
      '@': null
    '@': hyperweb.schema.Link
- id: [0, 5]
  name: Varia
  info: Category of items that do not belong to any specific category
  class_name: hyperweb.item.Item
  fields:
    name:
      schema: {'@': hyperweb.schema.String}
      '@': hyperweb.schema.Field
    title:
      schema: {'@': hyperweb.schema.String}
      '@': hyperweb.schema.Field
- id: [0, 6]
  name: Code
  info: "Source code. May keep information about programming language.\n         \
    \       If Code item is used in a context where a single object (a class, a function)\
    \ is expected,\n                the `name` property must be set and equal to the\
    \ name of the object that should be imported\n                after compilation.\
    \ Some uses may allow multiple names to be declared.\n              "
  fields:
    language:
      schema: {'@': hyperweb.schema.String}
      '@': hyperweb.schema.Field
    source:
      schema: {'@': hyperweb.schema.CODE}
      '@': hyperweb.schema.Field
- id: [0, 7]
  name: Text
  info: Plain or rich text for human consumption. May keep information about language
    and/or markup.
  fields:
    language:
      schema: {'@': hyperweb.schema.String}
      '@': hyperweb.schema.Field
    markup:
      schema: {'@': hyperweb.schema.String}
      '@': hyperweb.schema.Field
    text:
      schema: {'@': hyperweb.schema.Text}
      '@': hyperweb.schema.Field
- id: [0, 8]
  name: File
  info: 'Binary or text file that can be accompanied with information about its format:
    pdf, jpg, zip, ...'
  fields:
    format:
      schema: {'@': hyperweb.schema.String}
      '@': hyperweb.schema.Field
    content:
      schema:
        schemas:
          bin: {'@': hyperweb.schema.Bytes}
          txt: {'@': hyperweb.schema.Text}
        '@': hyperweb.schema.Select
      '@': hyperweb.schema.Field
- id: [6, 1]
  language: css
  source: "\n        /*** GENERAL STYLES */\n        body {\n          font-family:\
    \ 'Quattrocento Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   \
    \       font-size: 16px;\n          color: #333;\n        }\n        .page {\n\
    \          width: 980px;\n          margin: 0 auto;\n        }\n        h1 { font-size:\
    \ 26px; line-height: 34px; margin-top: 30px }\n        a { color: #006ecc }\n\
    \        a:visited { color: #00427a }\n        .catlink { font-size: 14px; margin-top:\
    \ -20px }\n        \n        /*** UTILITIES */\n        /*** SITEWIDE */\n   \
    \     \n        .scroll { overflow: scroll; }\n        \n        /*** ITEM PAGE\
    \ */\n\n        .item-data {\n          /*font-family: \"Times New Roman\", Times,\
    \ serif;*/\n          text-align: left;\n          border-collapse: collapse;\n\
    \        }\n        .item-data tr:not(:last-child) {\n          border-bottom:\
    \ 1px solid #fff;\n        }\n        .item-data td {\n          /*border-right:\
    \ none;*/\n          padding: 14px 35px 11px;\n          line-height: 20px;\n\
    \        }\n        .item-data td.key  {\n          border-right: 1px solid #fff;\n\
    \          padding-right: 25px;\n        }\n        .item-data td.value {\n  \
    \        font-size: 13px;\n          font-family: monospace;     /* courier */\n\
    \        }\n\n        /* .item-data tr:nth-child(odd) { background: #e2eef9; }\
    \ */  /* #D0E4F5 */\n        /* .item-data tfoot td { font-size: 14px; } */\n\n\
    \        .item-data tr.color0 { background: #e2eef9; }   /* #D0E4F5 */\n     \
    \   .item-data tr.color1 { background: #f6f6f6; }\n\n        .item-data td.nested\
    \ { padding-right: 0px; padding-bottom: 0px; }\n\n        .item-data.depth1 tr\
    \     { border-top: 1px solid #fff; }\n        .item-data.depth1        { width:\
    \ 980px; }\n        .item-data.depth1 td.key { width: 200px; }\n        .item-data.depth1\
    \ td.key {\n          font-size:   15px;\n          font-weight: bold;\n     \
    \   }\n        /* widths below should be equal to depth1's only decreased by \"\
    padding-left\" and \"border\" size of a td */\n        .item-data.depth2 tr  \
    \   { border-top: none; }\n        .item-data.depth2        { width: 925px; margin-left:\
    \ 20px; }\n        .item-data.depth2 td.key { width: 165px; }\n        .item-data.depth2\
    \ td.key {\n          font-size:    15px;\n          font-style:   italic;\n \
    \         font-weight:  normal;\n          padding-left: 15px;\n        }\n  \
    \      \n        .value .field .default     { color: #888; }\n        .value .field\
    \ .info        { font-style: italic; }\n        .value pre                 { line-height:\
    \ 10px; }\n        .value .scroll             { max-height: 150px; }\n    "
- id: [6, 2]
  language: hypertag
  source: "\n        %atomic_row key value schema\n            $text = schema.display(value)\n\
    \            td .key   | $key\n            td .value : div .scroll.atomic\n  \
    \              if (text.markup=='HTML') / $text\n                else        \
    \             | $text\n    \n        %print_catalog data schema start_color=0\n\
    \            $c = start_color\n            table .item-data .depth2\n        \
    \        for name, value in data.items()\n                    tr class=\"color{c}\"\
    \n                        atomic_row $name $value $schema\n                  \
    \  # $c = 1 - c\n        \n        %print_data item\n            $c = 0      \
    \    # alternating color of rows: 0 or 1\n            table .item-data .depth1\n\
    \                for name, value in item.data.items()\n                    $schema\
    \ = item.get_schema(name)\n\n                    # from hypertag.core.dom import\
    \ $DOM\n                    # if isinstance(html, DOM):\n                    #\
    \     html = html.render()\n                    \n                    tr class=\"\
    color{c}\"\n                        if schema.is_catalog\n                   \
    \         td .key .nested colspan=2\n                                | {name}\n\
    \                                print_catalog $value $schema.values $c\n    \
    \                    else\n                            atomic_row $name $value\
    \ $schema\n                            \n                    $c = 1 - c\n    "
- id: [1, 1]
  items:
    base.hy: [6, 2]
    base.css: [6, 1]
- id: [2, 1]
  name: Meta
  categories: {category: 0, item: 5}
- id: [2, 2]
  name: System
  categories: {space: 2, app: 3, site: 4, dir: 1}
- id: [3, 1]
  name: Items
  base_url: http://localhost:8001/admin/item/
  url_scheme: raw
- id: [3, 2]
  name: Catalog
  base_url: http://localhost:8001/
  spaces: {meta: 1, sys: 2}
- id: [4, 1]
  name: catalog.wiki
  directory:
    '=': [1, 1]
    '@': null
  apps: {items: 1, catalog: 2}
- id: [5, 1]
  title: Ala ma kota Sierściucha i psa Kłapoucha.
- id: [5, 2]
  title: ąłęÓŁŻŹŚ
  name: test_item
