- id: [0, 0]
  name: Category
  info: Category of items that represent categories
  itemclass: hyperweb.item.Category
  schema:
    fields:
      schema:
        schema: {'@': hyperweb.schema.RecordSchema}
      name:
        schema: {'@': hyperweb.schema.String}
        info: human-readable title of the category
      info:
        schema: {'@': hyperweb.schema.String}
      itemclass:
        schema: {'@': hyperweb.schema.Class}
        default: {'=': hyperweb.item.Item, '@': hyperweb.item.MetaItem}
      templates:
        schema:
          keys: {'@': hyperweb.schema.String}
          values: {'@': hyperweb.schema.String}
          '@': hyperweb.schema.Dict
        default: {? '' : "\n    context $view\n    $item = view._item\n    $cat  =\
            \ item.category\n\n    style !\n        body { font: 20px/30px 'Quattrocento\
            \ Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif; }\n       \
            \ h1 { font-size: 26px; line-height: 34px }\n        .catlink { font-size:\
            \ 14px; margin-top: -20px }\n\n    % print_headline\n        p .catlink\n\
            \            a href=$view.url(cat) | {cat['name']? or cat}\n         \
            \   | ($item.cid,$item.iid)\n\n    html\n        $name = item['name']?\
            \ or str(item)\n        head\n            title | {name}\n        body\n\
            \            h1  | {name}\n            print_headline\n            h2\
            \  | Attributes\n            ul\n                for attr, value in item.data.items()\n\
            \                    li\n                        b | {attr}:\n       \
            \                 . | {str(value)}\n"}
  templates: {? '' : "\n    context $view\n    $cat = view._item\n\n    html\n   \
      \     $name = cat['name']? or str(cat)\n        head\n            title | {name\
      \ ' -' }? category #{cat.iid}\n        body\n            h1\n              \
      \  try\n                    i | $name\n                    . | -\n         \
      \       | category #{cat.iid}\n            h2  | Attributes\n            ul\n\
      \                for attr, value in cat.data.items()\n                    li\n\
      \                        b | {attr}:\n                        . | {str(value)}\n\
      \            h2  | Items\n            table\n                for item in cat.registry.load_items(cat)\n\
      \                    tr\n                        td / #{item.iid} &nbsp;\n \
      \                       td : a href=$view.url(item)\n                      \
      \      | {item['name']? or item}\n"}
- id: [0, 1]
  name: Space
  info: Category of items that represent item spaces.
  itemclass: hyperweb.item.Space
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
      categories:
        schema:
          keys: {'@': hyperweb.schema.String}
          values: {cid: null, '@': hyperweb.schema.Link}
          '@': hyperweb.schema.Dict
- id: [0, 2]
  name: Application
  info: Category of application records. An application groups all spaces & categories
    available in the system and provides system-level configuration.
  itemclass: hyperweb.item.Application
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
      spaces:
        schema:
          keys: {'@': hyperweb.schema.String}
          values: {cid: null, '@': hyperweb.schema.Link}
          '@': hyperweb.schema.Dict
- id: [0, 3]
  name: Site
  info: Category of site records. A site contains information about applications,
    servers, startup
  itemclass: hyperweb.item.Site
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
      routes:
        schema:
          keys: {'@': hyperweb.schema.String}
          values: {'@': hyperweb.schema.RouteSchema}
          '@': hyperweb.schema.Dict
        multi: false
        info: dictionary of named URL routes, each route specifies a base URL (protocol+domain),
          fixed URL path prefix, and a target application object
- id: [0, 4]
  name: Item
  info: Category of items that do not belong to any specific category
  itemclass: hyperweb.item.Item
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
        multi: true
      title:
        schema: {'@': hyperweb.schema.String}
- id: [1, 1]
  name: Meta
  categories:
    category: [0, 0]
    item: [0, 4]
- id: [1, 2]
  name: System
  categories:
    space: [0, 1]
    app: [0, 2]
    site: [0, 3]
- id: [2, 1]
  name: Catalog.wiki
  spaces:
    meta: [1, 1]
    sys: [1, 2]
- id: [3, 1]
  name: catalog.wiki
  routes:
    default: {base: 'http://localhost:8001', path: /, app: 1}
- id: [4, 1]
  title: Ala ma kota Sierściucha i psa Kłapoucha.
- id: [4, 2]
  title: ąłęÓŁŻŹŚ
  name: [test_item, duplicate]
