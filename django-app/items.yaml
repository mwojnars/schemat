- id: [0, 0]
  name: Category
  info: Category of items that represent categories
  class_name: hyperweb.item.Category
  schema:
    fields:
      schema:
        schema:
          type: {'=': hyperweb.schema.Record, '@': builtins.type}
          '@': hyperweb.schema.RecordSchema
        default:
          fields: {}
          '@': hyperweb.schema.Record
      name:
        schema: {'@': hyperweb.schema.String}
        info: human-readable title of the category
      info:
        schema: {'@': hyperweb.schema.String}
      class_name:
        schema: {'@': hyperweb.schema.String}
        default: hyperweb.item.Item
        info: Full (dotted) path of a python class. Or the class name that should
          be imported from `class_code` after its execution.
      class_code:
        schema: {'@': hyperweb.schema.Text}
      templates:
        schema:
          values: {'@': hyperweb.schema.Text}
          '@': hyperweb.schema.Catalog
        default: {? '' : "\n    context $item, $category as cat, $app, $directory\
            \ as dir\n\n    style / $dir.open('base.css')['code']\n\n    % print_headline\n\
            \            p .catlink\n            a href=$app.url(cat) | {cat['name']?\
            \ or cat}\n            | ($item.cid,$item.iid)\n\n    html\n        $name\
            \ = item['name']? or str(item)\n        head\n            title | {name}\n\
            \        body .page\n            h1  | {name}\n            print_headline\n\
            \            \n            # $item.print_data x1 x2 x3\n            #\
            \ @(item.dom_properties())     -- item's method returns a DOM tree for\
            \ embedding into a document\n            # %(item.print_data) x1 x2  \
            \   -- item's attr is a Hypertag that can be used as a tag in a document\n\
            \            \n            # from APP/base import %print_data\n      \
            \      # from /apps/APP/base import %print_data\n            from base\
            \ import %print_data\n\n            h2 | Properties\n            print_data\
            \ $item\n"}
  templates: {? '' : "\n    context $item as cat, $app, $directory as dir\n\n    style\
      \ / $dir.open('base.css')['code']\n\n    html\n        $name = cat['name']?\
      \ or str(cat)\n        head\n            title | {name ' -' }? category #{cat.iid}\n\
      \n        body .page\n            h1\n                try\n                \
      \    i | $name\n                    . | -\n                | category #{cat.iid}\n\
      \n            h2 | Properties\n\n            from base import %print_data\n\
      \            print_data $cat\n\n            h2 | Items\n            table\n\
      \                for item in list(cat.registry.load_items(cat))\n          \
      \          tr\n                        td / #{item.iid} &nbsp;\n           \
      \             td\n                            $ iname = item['name']? or item\n\
      \                            try\n                                a href=app.url(item)\
      \ | $iname\n                            else\n                             \
      \   | $iname (no public URL)\n"}
- id: [0, 1]
  name: Directory
  info: A directory of items, each item has a unique name (path). May contain nested
    subdirectories. Similar to a file system.
  class_name: hyperweb.item.Directory
  schema:
    fields:
      items:
        schema:
          keys: {'@': hyperweb.schema.EntryName}
          values: {'@': hyperweb.schema.Link}
          '@': hyperweb.schema.Catalog
- id: [0, 2]
  name: Space
  info: Category of items that represent item spaces.
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
      categories:
        schema:
          values:
            category:
              '=': [0, 0]
              '@': null
            '@': hyperweb.schema.Link
          '@': hyperweb.schema.Catalog
  class_name: Space
  class_code: "\n        from hyperweb.item import Item\n        class Space(Item):\n\
    \            def get_category(self, name):\n                return self['categories'][name]\n\
    \    "
- id: [0, 3]
  name: Application
  info: Category of application records. An application groups all spaces & categories
    available in the system and provides system-level configuration.
  class_name: hyperweb.item.Application
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
      url_scheme:
        schema:
          values: [raw, spaces]
          indices: false
          '@': hyperweb.schema.Enum
      spaces:
        schema:
          values:
            category:
              '=': [0, 2]
              '@': null
            '@': hyperweb.schema.Link
          '@': hyperweb.schema.Catalog
  folder: {'@': hyperweb.schema.PathString}
- id: [0, 4]
  name: Site
  info: Category of site records. A site contains information about applications,
    servers, startup
  class_name: hyperweb.item.Site
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
      apps:
        schema:
          values:
            category:
              '=': [0, 3]
              '@': null
            '@': hyperweb.schema.Link
          '@': hyperweb.schema.Catalog
  directory:
    category:
      '=': [0, 1]
      '@': null
    '@': hyperweb.schema.Link
- id: [0, 5]
  name: Varia
  info: Category of items that do not belong to any specific category
  class_name: hyperweb.item.Item
  schema:
    fields:
      name:
        schema: {'@': hyperweb.schema.String}
        multi: true
      title:
        schema: {'@': hyperweb.schema.String}
- id: [0, 6]
  name: Code
  info: "Source code. May keep information about programming language.\n         \
    \       If Code item is used in a context where a single object (a class, a function)\
    \ is expected,\n                the `name` property must be set and equal to the\
    \ name of the object that should be imported\n                after compilation.\
    \ Some uses may allow multiple names to be declared.\n              "
  schema:
    fields:
      language:
        schema: {'@': hyperweb.schema.String}
      code:
        schema: {'@': hyperweb.schema.Text}
- id: [0, 7]
  name: Text
  info: Plain or rich text for human consumption. May keep information about language
    and/or markup.
  schema:
    fields:
      language:
        schema: {'@': hyperweb.schema.String}
      markup:
        schema: {'@': hyperweb.schema.String}
      text:
        schema: {'@': hyperweb.schema.Text}
- id: [0, 8]
  name: File
  info: 'Binary or text file that can be accompanied with information about its format:
    pdf, jpg, zip, ...'
  schema:
    fields:
      format:
        schema: {'@': hyperweb.schema.String}
      content:
        schema:
          schemas:
            bin: {'@': hyperweb.schema.Bytes}
            txt: {'@': hyperweb.schema.Text}
          '@': hyperweb.schema.Select
- id: [6, 1]
  language: hypertag
  code: "\n        %print_data item\n            table .data : tbody\n           \
    \     for field, value in item.data.items()\n                    tr\n        \
    \                td .name  | {field}\n                        td .value | {str(value)}\n\
    \                        \n        %print_data_ul item\n            ul\n     \
    \           for field, value in item.data.items()\n                    li\n  \
    \                      b | {field}:\n                        . | {str(value)}\n\
    \    "
- id: [6, 2]
  language: css
  code: "\n        body {\n          font-family: 'Quattrocento Sans', \"Helvetica\
    \ Neue\", Helvetica, Arial, sans-serif;\n          font-size: 16px;\n        \
    \  color: #444;\n        }\n        .page {\n          width: 980px;\n       \
    \   margin: 0 auto;\n          overflow: hidden\n        }\n        h1 { font-size:\
    \ 26px; line-height: 34px; margin-top: 30px }\n        a { color: #006ecc }\n\
    \        a:visited { color: #00427a }\n        .catlink { font-size: 14px; margin-top:\
    \ -20px }\n        \n        table.data {\n          width: 100%;\n          #\
    \ font-family: \"Times New Roman\", Times, serif;\n          border: 1px solid\
    \ #FFFFFF;\n          background-color: #F6F6F6;\n          text-align: center;\n\
    \          border-collapse: collapse;\n        }\n        table.data td, table.data\
    \ th {\n          border: 1px solid #FFFFFF;\n          padding: 11px 12px 8px;\n\
    \        }\n        table.data tbody td {\n          line-height: 20px;\n    \
    \    }\n        table.data tbody td.name  {\n          width: 20%;\n         \
    \ font-size: 15px;\n          font-weight: bold;\n          text-align: right;\n\
    \          padding-right: 25px;\n        }\n        table.data tbody td.value\
    \ {\n          width: 80%;\n          font-size: 13px;\n          font-family:\
    \ monospace;     /* courier */\n        }\n\n        table.data tr:nth-child(odd)\
    \ {\n          background: #e2eef9;    /* #D0E4F5 */\n        }\n        /* table.data\
    \ tfoot td { font-size: 14px; } */\n    "
- id: [1, 1]
  items:
    base.hy: [6, 1]
    base.css: [6, 2]
- id: [2, 1]
  name: Meta
  categories: {category: 0, item: 5}
- id: [2, 2]
  name: System
  categories: {space: 2, app: 3, site: 4, dir: 1}
- id: [3, 1]
  name: Items
  base_url: http://localhost:8001/admin/item/
  url_scheme: raw
- id: [3, 2]
  name: Catalog
  base_url: http://localhost:8001/
  spaces: {meta: 1, sys: 2}
- id: [4, 1]
  name: catalog.wiki
  directory:
    '=': [1, 1]
    '@': null
  apps: {items: 1, catalog: 2}
- id: [5, 1]
  title: Ala ma kota Sierściucha i psa Kłapoucha.
- id: [5, 2]
  title: ąłęÓŁŻŹŚ
  name: [test_item, duplicate]
